package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcd\x4a\x04\x31\x0c\xc0\xf1\xbb\x4f\xd1\xf7\xd8\x93\xe2\x0a\x0b\x82\xe2\xee\xc1\x5b\x26\x76\x33\x25\x4c\xbf\x48\xd3\x81\x79\x7b\x19\x41\xf6\x96\xce\xf9\xff\xa3\x24\xe9\xeb\xd7\xc7\xa7\xbb\x3d\xbf\xbc\x9f\xdd\xe5\xcd\x9d\xbf\x2f\xd7\xdb\xd5\x4d\x0a\x28\xca\x33\x7a\x85\x8a\x7e\xc1\x40\xd3\xe9\x69\x48\x57\x92\xc6\x25\x1f\xa0\x45\x36\x43\xfd\x74\x8e\x77\xa3\xfb\x74\x87\xc8\xd9\x9a\xa9\xa9\x3d\x73\x53\xaa\x46\x56\xe1\x10\x48\xc6\x02\xa4\x5b\xfb\x26\x6a\xcd\x1e\xa4\x48\xb0\x2b\x54\xae\xd6\x03\x7b\x1e\x1c\xe3\x9f\x80\x2f\x79\x3e\xe2\x56\xb4\x56\x7f\xb0\xe1\x7f\x57\x14\x4c\x46\xef\xcd\x3c\xf2\x9e\x81\xf3\x5c\x46\xc6\xbe\xe2\x1f\x49\x6d\x48\xb4\x2c\x64\x6d\xb3\xa5\x08\x35\xf6\xc0\x23\xa4\x94\x6a\x44\xa5\xe9\xf4\x1b\x00\x00\xff\xff\x07\x37\xa2\xca\x5f\x03\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6e\x1b\xc7\x15\xbe\xd7\x53\x0c\x92\x02\xa4\x00\x2b\x21\x65\xcb\xb5\x55\x04\xa8\x6c\xb3\x0e\x5b\x9b\x2a\x64\xba\x4d\x00\x03\xe4\x70\x77\x44\x6e\xb4\x3b\xb3\x98\x1d\x52\x16\xd0\x0b\x09\xad\x5b\xb9\x6e\x61\xbb\x71\x62\x1b\x6e\xda\x0a\x06\xe2\x04\x71\x22\x17\x70\x55\x83\x92\xeb\x87\x89\x96\x94\xaf\xf2\x0a\xc5\xec\x2e\xc5\xfd\xe5\xcc\x52\x4b\xc5\x45\xc3\x1b\x49\x3b\x67\x86\x33\xe7\x7c\xe7\x9b\xf3\x9d\xd5\xf9\xa5\xd2\x42\xb5\x04\xaa\x0b\xe7\x2e\x95\x40\x9d\xd5\x20\x65\xda\x32\x54\x58\xcd\x84\xca\x0a\x6c\xa2\x3a\xc8\x4f\x01\x50\xd7\xd4\x3a\xe8\x40\xaa\xb4\x20\xcd\x9f\x3e\x35\x0d\x2a\x8b\x55\x50\xb9\x7a\xe9\xd2\x09\x3e\x08\xf9\x68\x43\x6b\x6a\x98\xe5\x67\x0b\xc3\x41\xb0\x70\xb5\xba\x58\x2b\x57\xce\x2f\x95\x2e\x97\x2a\x55\xc7\x96\x22\x93\xd4\xc2\xab\x5d\x28\xfd\x6c\xe1\xea\x25\xdf\x8a\x18\x1a\x68\x68\x52\x2c\x14\x62\x6c\x54\xcd\x32\x75\xb8\x56\x0b\xda\xce\xce\xcd\xc5\xd9\x22\x4b\x19\xda\xcc\xc5\xae\xa7\x50\x04\x19\x52\xeb\x40\x85\x0c\x31\xcd\x40\x51\x93\xb6\xa9\x8a\x4c\x54\xa4\x23\xc7\x84\x3b\xa3\x18\xbb\x15\xc7\xa0\xc6\xa7\x8f\x58\xe8\x97\x4b\xe5\xcb\x0b\x4b\x1f\x82\x5f\x94\x3e\x04\x79\xc7\xc3\x27\x9c\x28\x4c\xf3\x41\xfe\xb0\x6e\x72\x2f\xe6\x0f\x1d\x3a\x1c\xa0\x26\x36\xfc\x23\x27\x3c\x7f\x4e\x4f\x4d\x83\x52\xe5\x62\xb9\x52\x02\xef\x81\x32\xc6\xe4\xc2\xb9\xc3\xaf\x3d\xff\xfe\xc2\xd2\x95\x52\x15\xbc\x07\xda\x6c\xf9\x8c\xd1\x38\xf5\x93\xa9\x44\x64\x74\x10\xb5\x34\x82\xbf\x1f\x64\x78\xb0\xcc\x06\x42\x87\x27\x19\x6d\x66\xb5\xa0\x10\x8c\x12\x00\x33\x29\xea\x68\x68\x35\x19\x1a\x99\x20\x50\x0c\x9c\x09\xe3\x83\xd0\xb5\xac\xa1\xd1\x16\x46\x9b\xd0\xa6\x18\x12\x9a\x8a\x30\xd3\x96\x35\x44\xfd\xa1\x12\x62\x67\x36\x89\x7e\x60\x43\x8f\xc9\xf4\x5c\x21\x07\xce\x2f\x5e\xe6\x9b\x07\xb9\xde\x83\x6d\xfb\xce\xe7\xf6\xcb\xbf\xf4\xb6\x1e\xe7\x8b\xee\xcf\xdf\x14\x7a\x5f\x3f\xb6\x5f\xbc\x98\xce\xb9\xe8\x22\x6d\xaa\x20\xc1\x8e\x64\xf0\xa5\x93\x26\x11\x11\xe1\xff\x08\xc9\x81\xab\x57\xca\x95\x8b\xe0\x5c\x75\xa9\x54\x3a\x1a\x2a\x1b\x6d\x4d\x57\x65\xf0\x68\x6a\x26\xd2\x35\x1c\x65\x16\x07\x94\xd1\x64\x1e\x98\x7b\x1c\x22\x39\xcd\x62\x90\xb5\xad\x10\x9b\x44\x4c\x7d\xf8\xf9\xdb\xef\xec\xdd\x6e\xff\x8f\x3b\xbd\xf5\x0d\x17\x2e\x88\x52\x42\x43\x50\x18\xb1\xc0\xeb\x7b\x0f\x0f\xb6\xb7\xf7\x5f\x6d\xf5\x36\xb6\xbd\x05\x3a\x08\x33\xf9\x1d\xec\x77\x6f\xed\xef\xee\xe4\x06\xbb\xa7\x01\x68\xe4\x47\xcf\xb5\xf7\xd6\xed\x27\xb7\x7a\xf7\x77\x5e\xdf\x7f\xee\xae\xb0\xac\x61\xcd\x6a\xa5\x58\xa2\xbf\xfb\x71\xef\xb3\xbf\xfb\x97\x88\x40\x58\xb4\x89\xcd\x47\xf6\x6e\xd7\xbf\x42\x04\xe1\x82\x15\x7a\x8f\x9e\xf7\x3e\x7d\xe6\x5f\x21\x72\x71\x38\xd9\x36\xea\x18\x37\x37\x7b\x7f\x7d\x9a\x8b\x82\x3e\x5b\xb4\x2b\x86\x5a\xe3\xa8\x94\x01\x7c\x93\x92\xb6\x29\x09\x5b\x27\x8b\xa4\x21\x8e\x64\x97\x0d\x67\xc3\x5c\x5c\x1c\x5c\x46\x6e\x1b\x1e\xdb\x14\x93\x4c\x14\xa2\x22\xb1\x0d\x66\x0e\xfa\x19\xba\xce\x46\xb0\x62\x2c\x20\x52\xa4\x40\x1a\xac\x4f\x1a\x13\x16\x93\x2c\xe3\xd3\x53\x9a\x2f\x45\xfe\xb5\xd1\x7b\xf6\xbc\xdf\x7d\xa5\xa9\xb9\x31\x10\xf3\xbd\x93\x62\x8c\x88\x18\x45\x29\x77\xfe\x6c\x7f\x7d\x3f\x27\x92\x21\x47\x41\xd0\xff\x01\x89\x5a\x84\x32\x51\xc2\x7a\xe0\x15\xbb\x75\xb2\x19\x84\x4c\x99\x04\x4a\x89\xf9\x90\x8a\x11\xa2\x3e\x9c\x62\xa9\x91\x97\x69\x82\xbb\x4e\x91\xc3\xfb\x51\xb3\x7b\xfc\x8a\x05\x5d\xd7\x58\x4d\x70\x33\xf8\x78\x61\x7d\xdd\xfe\x43\xb7\xff\x8f\xc9\xb0\x8a\x68\xdf\x7e\x56\xf9\x81\x24\x32\xa8\xb4\x78\x00\xb5\x26\x26\x54\xa2\x2e\x30\x0c\x88\x55\x2b\x5c\x18\xac\x42\x8d\x59\x75\xf0\x91\x45\xb0\x0f\xd0\x62\xde\x9a\x24\x1b\x31\xaa\x35\x9b\x5c\xc2\x1e\xb7\xc6\x4e\x56\x48\xfe\xef\x64\x6b\x26\xb2\x52\xe9\x6b\x99\x8e\x4a\xbc\x9a\x35\x21\x85\xc6\x20\x3e\x91\x51\x84\xe3\x05\xfa\x71\xf7\x5b\xda\x6e\xa3\x8e\xff\x38\x62\x8b\xc5\x0b\x7d\x8d\xb6\x33\xef\xbe\xb1\x51\xe1\x1f\x66\xd7\xc1\x93\xcf\xed\xdb\x77\xed\x87\x5f\x94\x2f\xe4\x0e\x41\x91\x78\x9f\x44\x3b\x30\x78\x99\x24\xc7\x2b\x48\xb7\xe3\x36\x30\xc4\x01\x61\x6e\x40\xd8\xd1\x03\x62\x20\xcb\x4a\xd3\x24\x3f\x57\xbe\x58\xae\x54\xd3\xe5\xe1\x28\xc2\xbd\x7d\xf7\xf5\xfa\xc6\xc1\xfa\x8d\xef\xf6\x36\xed\xdb\xdb\xfd\x2f\xbb\xdf\xed\xdd\xcc\x79\xf1\x64\xba\x5c\x55\x70\xa8\x89\x74\x82\x9b\x41\xfa\x8b\xc9\xe5\x84\x35\xe4\x05\x94\x07\x81\xe0\x17\xb5\xa9\x2e\xba\x67\x8f\xa9\x5f\x44\x68\xf3\x78\xa3\x99\xd4\x70\x8c\x37\x74\x59\xb1\x5a\xfa\xa0\x9a\x54\xe3\xb5\x1b\xba\xa6\xd4\x41\xb9\x52\xcd\x87\x6f\xa7\x82\x0f\x39\x37\x9e\xda\x7b\xeb\x6f\xce\x35\x1f\xee\x28\x06\xf7\x3d\xa2\xa7\x28\x29\xa9\x13\xb0\xc2\x0d\xcb\x95\x0b\xa5\x0f\xdc\x48\x79\x24\x9d\x29\x9a\x6a\x9c\x21\x3d\x48\xa5\x21\xe4\xb8\x8e\x76\x72\x59\x9f\xaa\x94\xbf\xb7\xb3\xbf\xbb\xb3\xdf\xed\xa6\x09\xff\x98\xe0\x8a\x46\x21\xc9\xff\xde\x79\xf3\x83\x5f\x32\x8c\xc2\xa0\x70\x91\x49\x6c\x71\x19\x24\xf5\xbe\x31\xc5\xbb\xc9\xc3\xb2\x8a\xb3\x6d\x06\xfd\xfb\xa4\xe6\x7c\xae\x90\x1b\xbf\x37\x3f\x99\x80\xd4\x14\x82\x97\xfd\xb9\x21\x93\x18\x72\x65\x68\xe0\x46\x89\xf7\x25\x54\x14\x64\x59\x35\x46\x56\x50\x58\x5f\x44\x6c\xd7\x0c\xbd\x16\xb9\x28\xdd\x2f\xb2\x10\x95\x08\xb3\x20\x11\x32\xf2\x67\x8a\x57\xb3\x12\x40\x6f\x1b\x0d\xae\x33\x7c\x84\x35\x4a\xb1\xf7\x9e\x6e\xf5\x3e\x79\xe6\x53\xec\x61\xcd\x3f\x4a\xad\x9b\x6d\xab\xf5\xed\xfa\x86\x49\xbf\x5d\xdf\xc0\x84\x21\x4f\x05\xfb\x5f\xbc\x0a\xb2\x27\x55\xaa\x8d\x95\x9f\x42\x87\xc5\x6b\x55\x71\xc1\x95\x3a\xb3\x99\x86\xd7\x12\xb2\xdb\xa4\x35\x41\xdc\x1c\x33\xe7\xdd\xaf\xa2\x13\x8c\x6a\xe2\x4c\x99\x28\x15\x70\x09\x37\xc6\xf5\x28\xd3\x5a\x49\x59\x08\xab\x90\xc1\x70\x61\xca\x03\x61\x8d\x55\x6d\x64\xe8\x23\x4e\x31\x59\x16\xa5\xd2\xbe\x33\xa1\x65\x49\xb9\x0e\x6b\xca\x8a\xd4\x8a\xb0\x03\x19\x14\xf6\xd4\xd2\xd6\x25\x3a\x69\x6a\x58\xb6\x30\xac\x43\x85\x69\x1d\x94\x74\x3f\x4e\x40\x63\xcc\xcc\x80\x99\x11\x9f\xa9\x72\xe5\x4a\x69\xa9\xca\xab\xaa\x45\x07\x73\x6e\xc0\xa7\x7e\xb5\x70\xe9\x6a\xe9\xca\x14\x70\x22\x0f\xc0\x5b\x50\x35\x34\xfc\xd6\x09\xe7\x8f\xa2\xfb\x23\xd7\x24\x2b\x1a\xb6\x72\xde\x5f\xa8\x58\x80\xaa\x72\xf2\xec\xa9\xb3\x0d\x38\x77\x16\x36\x1a\x68\xee\x34\x2a\xcc\xfd\x78\x79\xb6\xb0\x7c\xe6\xcc\x49\x34\xb0\xeb\x7f\xb3\xd5\xbf\xf3\x7b\xfb\xee\x03\xef\xc1\xc0\x35\x00\x54\x16\x7f\x9d\x9f\x0e\x3f\x2c\x4e\x01\x30\x2d\x3e\x06\x00\x71\xc0\xad\x71\xc1\x57\xf7\xce\x30\x12\xbf\x1c\x70\x2d\x82\x45\x9d\x21\x7e\xbd\x18\x50\xd3\x05\xff\xa0\x01\x40\xbd\xa1\x51\xd6\x52\xe1\xda\x08\x4e\x75\xa8\xd0\x80\x74\xc5\x4d\xfc\xc1\x36\x10\x35\xbc\xac\x4b\xe8\x1d\x0d\x8c\x1c\xb9\x28\xb0\x71\x05\x40\xa2\x51\x94\x5d\xb9\xbb\x8f\xca\x17\x43\x21\x9b\x8e\x58\xa5\x35\x6b\x1a\x89\x92\x2a\x9b\x07\x6e\x83\xaa\x21\x54\x1a\x61\x20\xbb\x33\xe9\xaa\x78\xe2\xde\xa7\x07\xff\xb9\xdb\xfb\xec\xb7\xaf\x1f\xde\x09\xcc\x45\xd7\x91\x58\xe0\xf4\x6e\x3e\x39\xd8\xfa\x53\xcc\x6c\x95\xac\xe2\xd8\x50\xfb\xea\x9d\x17\xb7\x0e\x5e\xbe\xb4\x37\x77\xec\x8f\x37\x02\x2b\x48\x48\x25\x91\x58\x0d\xd8\x90\x44\x35\x15\x5c\x8a\x1c\xae\x75\x02\xc4\x8b\xaf\x2c\xe0\x68\x58\x21\x38\x8a\xef\xa9\x94\xcd\xb0\xa0\xac\x05\xa0\x6e\x58\x13\x82\x27\x45\x50\x65\x86\x9c\xed\xe0\xed\x57\xec\xeb\x82\x82\x67\x24\xee\x7e\xa4\xef\x7f\x64\x02\xa8\x4c\x42\xef\x09\xac\xf1\xb9\xc8\x6f\x9d\xe0\xe6\xa0\x76\x4e\x6c\x54\x72\xd2\x32\x11\x16\xbf\x76\xf5\x8c\x65\x5f\xad\x46\x4a\xa0\x91\xa6\xf2\x45\x50\x44\xa5\x1e\x56\xa7\xf1\xb8\x5c\xa6\xc8\x6a\x49\xd9\xa2\xeb\xa6\x46\x91\x55\xd3\x70\xb2\x7f\x0b\x21\x5b\x69\xe4\x0d\x77\x22\x3d\x23\x55\x02\x3a\x07\x0c\x37\x91\x1d\xb4\xc4\x34\x97\x27\xc0\xac\x2e\x84\xf2\x83\x5f\x32\x4d\x99\xa1\x96\x87\x34\xab\x0b\x3c\xee\x8a\x95\x55\xb5\x72\x1d\x2f\xae\x7e\xa1\xde\x96\x30\x73\xcb\xad\xb0\xac\x88\xdb\xa1\xd7\x6c\x1c\xf5\xef\xb5\xbe\x4e\xa3\x58\x83\x1d\x31\x30\x6b\x86\x5e\x33\xf5\x76\x53\x1b\x97\xcb\x82\x6e\x4c\xf0\x75\x62\xa3\x49\xdc\xd9\x93\xef\xed\x65\xee\xab\x88\x82\xf1\x39\x2b\xac\x63\x06\xd2\xc5\x6a\x0d\xe4\x08\x70\x3e\x33\xc0\x62\xc8\x9c\x07\x56\x0b\xe9\xfa\x4f\xad\xd6\x35\x0c\xbc\x8f\xd7\xad\xa9\x40\x03\xf1\xe1\xe1\x00\x8e\x3c\x19\xbc\xc8\x9f\x1f\x3e\xe2\x2b\x23\xa5\x45\x00\x5f\x97\x80\x55\x42\x75\xd5\xfb\xe6\xc2\x50\xe9\xb8\x12\x27\xcd\x39\x66\xbd\xdd\x37\xe0\xe8\x93\xf0\xf1\x84\xb3\x04\x87\x70\xcc\xb3\x63\x3c\xcf\x49\xef\x0c\x26\x59\x45\xd4\xd9\xfa\xa8\x53\x0d\xad\x12\xce\x16\x67\x80\x13\x47\xd2\x9d\xb3\x78\x94\x73\x9e\x1a\xe0\x4f\x00\x40\xab\x75\x8d\x26\x61\x30\x38\x86\xe3\x1e\x6a\xd8\x6c\xb3\x79\xff\x13\x00\x5a\xc4\x62\xf3\x40\x27\x0a\xd4\x9d\x5f\x67\x67\x01\x78\xbb\xff\xd5\xb6\x7d\xfb\xb1\xfd\xea\x86\xbd\xf5\x55\xd0\x9c\x57\x4f\xf3\x80\x12\xc2\x82\xcf\x4d\x68\x59\xf3\xa0\x38\x7b\xf2\xd4\xdc\xe9\xe0\xc8\x2a\xa1\x2b\x96\x09\x15\x34\x0f\xde\xe5\xf3\xde\x65\xc8\x62\xe0\xed\xfd\x17\xdd\xfe\x97\x5d\xfb\xd9\x3f\x7b\x0f\xb6\xc1\x8f\xde\x5f\xbc\x5c\x02\xfd\x7b\x5f\xf4\x36\xff\xdd\x7f\xf4\x8d\xfd\xf2\x13\xff\x1a\xc3\x40\xd0\xf1\x20\x17\x47\x9b\x0c\x19\xa6\x0e\x19\xfa\x81\x38\xa5\x88\xf3\xd0\x5d\x3e\x6f\xf9\x5d\x11\x73\xe2\xd0\x41\xe3\x4e\xc5\xb7\x96\xc4\xc5\x17\x89\x0e\x71\x73\x90\x0e\x5e\x1f\x7b\x1e\x14\xdf\x29\x5c\xc3\x1d\x48\x79\x5a\x3a\xff\xb0\xe8\xe6\x27\x4f\x14\xd8\x44\x5e\xae\x06\x19\xad\xad\xe9\xaa\xfb\x1c\x87\x1f\xf0\xec\x1a\x26\xb8\x24\xdd\x37\xc9\x8c\xb3\xc4\x4c\x31\x42\x94\xc3\x95\xf9\x07\xe1\xce\xbc\x90\x4f\x9a\xc4\x9d\x06\x0c\xa8\xe1\x77\x9a\x64\xdc\xcd\xcc\x86\x37\xc3\xf3\x2c\xfd\x5e\x9c\xec\x9c\xe9\x5c\xc3\xa9\xf8\xfb\xf8\xe0\x31\xb8\xe2\x7e\x0e\x3b\xf0\x4d\x04\xc7\x47\xb0\x03\xb3\x84\x87\xd1\xc1\x40\xd1\x11\xc4\xd1\xc7\x1a\x3f\xe3\xf0\xc6\x4a\xbf\xc1\x2c\x20\xc3\x37\xe2\x61\xe6\x0d\x45\xcc\xa0\x88\xa8\x98\xc6\x9b\x08\x18\x6c\x1a\x59\xe2\x05\x9b\x46\x70\x5e\xea\x6d\x44\x50\xe1\xa8\x1e\xff\x44\xe9\x8d\x78\x33\x41\x02\x32\xfe\x1b\x00\x00\xff\xff\x6f\x76\xc8\xf6\xe9\x3d\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
