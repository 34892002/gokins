package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\xe6\xc2\x25\x9f\x9c\x9b\x12\x9f\x93\x99\x97\x8a\x47\x49\x71\x49\x62\x3a\x7e\xf9\xd4\x02\x3c\xd2\xb9\xa9\xc5\xc5\xf8\x0d\xc8\x2f\x4a\xc7\x2f\x1b\x5f\x90\x59\x80\xcf\x00\x90\x34\x01\x4f\xc0\x94\xc4\x97\xa5\x16\x15\x67\xe6\xe7\xe1\x53\x9a\x58\x94\x98\x8b\x47\xbe\xb4\x38\xb5\x88\x80\x34\x01\x2f\x81\x95\xe4\x16\x13\x54\x52\x92\x9f\x9d\x9a\x97\x60\x0d\x08\x00\x00\xff\xff\x1f\xf0\x6a\xe9\xdc\x01\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x6f\xdb\x46\x13\xbe\xfb\x57\x2c\x72\xb1\x0c\x38\x80\xe4\x44\x79\x13\xbc\x27\x27\x61\x03\xa1\x8a\x5c\x28\x72\x9b\x9c\xc8\x15\xb9\x92\xb7\x11\x97\xc4\xee\xca\xb5\x6f\x32\xda\x7c\x35\x2d\xec\xa0\xf9\x44\x9a\x36\x2e\x8a\x06\x2d\xd2\x3a\x87\xd4\x40\x25\x03\xf9\x31\x31\x25\xf9\x94\xbf\x50\xf0\x43\x12\x45\x89\xe2\xae\x22\x17\x45\x11\x1f\x6c\x89\x9c\x19\x73\x67\x9e\x79\xf6\x99\xe5\x85\xa2\xb2\x5c\x52\x40\x69\xf9\x7c\x5e\x01\x1a\x57\xcb\x75\x5c\x33\x34\x90\x9a\x03\x40\xc3\x86\x06\xd6\x21\xd5\xd7\x20\x4d\x9d\x39\xbd\x00\x0a\x2b\x25\x50\x58\xcd\xe7\x17\xdd\x9b\x36\xb6\x51\x0d\x13\xa4\x8e\x58\xad\xe6\xf3\xe0\xa2\xf2\xd1\xf2\x6a\x7e\x9c\xf9\x3a\xa2\x0c\x5b\x44\xd0\x8d\x71\xc8\xeb\x6c\x60\x99\x49\xa7\xc7\x98\x82\x0b\x2b\x97\x2f\x2b\x85\x12\x98\x6f\xff\xf0\x95\xd3\x6a\x76\xbe\xde\x6f\x37\xb6\xe6\xbd\x08\x88\x52\x8b\x0e\x02\x64\x13\x02\x1c\xdd\x7f\xd2\xdd\xdb\x3b\x7c\xb3\xdb\xde\xda\x0b\x02\xac\x23\xc2\xc5\x9f\xe0\xb0\x79\xf7\xb0\xb5\xef\xbb\x72\x6c\x22\x95\x71\x68\xda\x1a\x30\x20\x47\xee\xf7\x54\xc2\x02\xee\xbc\xe8\xee\x7e\xd3\x7e\xb4\x7f\xf4\xe0\x4d\x2f\x08\xaf\xa1\xc1\xff\x5f\xca\x66\x27\x07\x78\x7e\xeb\xe8\xa7\xc7\xbe\xab\x89\x18\x83\x55\x19\x67\x2f\x7d\xe1\xd5\x33\x0e\x29\x47\x86\xf0\xf3\x3b\x07\x0d\xe7\xc5\x5d\xf7\xf9\x1f\xbd\xf6\x23\x54\x30\xc1\x6c\x4d\x22\x44\xa7\xf5\x5d\xfb\xd9\x8f\xe1\x10\x3a\x45\x50\xea\x21\x6e\x3f\x75\x5a\xcd\x70\x84\xba\x6d\x48\x45\x68\x3f\x7d\xdd\x7e\xf8\x2a\x1c\x21\xc0\xad\x78\x2e\x3b\x77\x6e\xb7\xbf\x7f\xe9\x39\x7f\x52\xcc\x5d\x5e\x2e\x5e\x03\x1f\x2b\xd7\x40\xca\x6d\xab\x05\xb0\x7a\x25\x57\xb8\x04\xce\x97\x8a\x8a\x32\xb7\xf0\xff\xb9\x68\x1b\xea\xa6\xa1\xba\xed\x22\xd2\x89\x55\x6a\xd5\x6d\xc1\x7e\xf2\xda\x5b\xb8\xf7\x90\x68\xd8\x68\x9b\x66\xc7\x65\xd7\xb3\x24\x75\x53\x03\x98\xf0\x54\x26\x13\x67\xa2\x5b\x84\x7b\x2d\xc7\xd1\x06\x0f\x5d\x16\x02\x81\x04\x68\x65\xd0\x39\x5d\x15\x19\xf7\xba\x4f\x82\x4c\x85\xd9\x31\x04\xd5\x3f\xb7\xda\xaf\x5e\x77\x9a\x6f\xb0\x31\x3f\x45\x8d\xdf\x9b\x5f\x37\x30\x57\x75\xcb\x40\x1a\x28\xe3\xaa\x5b\xd9\xa5\x04\x86\x6d\x34\x9c\x5b\xcd\xce\xf3\x59\xf1\x33\x81\xa6\x04\xc3\x39\x3b\xdf\x3a\xbf\x3f\xf2\x3d\x0d\xcc\xec\x1a\xdc\x54\x45\x22\x7c\x20\xc3\x59\x91\xa1\x66\x11\x95\xd5\x75\x1d\xb1\x30\x61\xc4\xa5\xdc\x22\x6a\x05\xe2\x5a\x9d\x22\x01\x63\x66\x51\xde\x87\x61\x66\x12\x3d\x24\x6f\x8a\xd3\x76\x3c\xb2\x45\x1a\x5e\xb2\x47\xab\xc3\x32\x2b\xb1\x4b\xa3\x94\x20\x8d\xf4\x99\x12\x92\x9f\x14\xb1\xfe\xfa\x6f\xb1\x51\xd2\x02\xc2\x6c\xf4\x81\x5c\x66\x41\x2e\x88\x52\x5c\x25\x96\x10\x5d\x90\xba\x59\x46\x74\x32\x52\x02\x45\x62\x9a\x90\x18\x2c\x2a\x49\x0c\x64\x23\x62\x30\xd5\x7d\xd8\xcf\x99\x45\x06\x77\xb0\x29\x48\x31\x1a\x22\xeb\x98\x5a\xc4\x44\x84\xb3\x68\x14\x31\x3e\x93\x67\xa9\xfe\x5c\x90\x4c\x54\xd0\xbd\x7b\x3e\x77\x29\x57\x28\xf5\x6f\x80\xe5\xd5\xd2\x8a\x9a\x2b\x5c\x28\x2a\x6e\x01\xfc\xb2\x4b\x10\x84\xb3\x7d\xef\xa8\xb1\xd5\x6d\xdc\x78\x77\x70\xdb\xd9\xde\xeb\xfc\xda\x7c\x77\x70\x47\x62\xd8\x19\x56\x89\x35\x8b\x54\x87\xcb\xc2\x37\x6d\x24\x24\x46\x25\x24\x25\x26\x15\x6b\xa4\xfe\x75\x5a\x4b\xe2\x8a\xd1\x02\xb9\x19\x5d\x04\x42\x75\xb2\x68\xf5\x9f\xad\xd1\x38\x41\x15\xbb\x2c\xcd\x40\x4c\xd7\x40\x49\xb9\x5a\x8a\xdb\x45\xea\xe5\x1a\xd6\x35\x90\x2b\x94\x52\x51\xb9\x9f\x0e\xe1\xe1\xc6\x4b\xe7\xa0\xf1\xef\x21\x20\x03\xd5\x90\x17\xc1\x6b\xbb\xe8\x73\x87\x4d\x54\x37\xbe\xf4\xe8\x10\x83\x00\xd7\x30\x57\xb8\xa8\x5c\xf5\x2b\x95\xf2\x7e\x8b\x60\x44\x75\x77\xeb\x00\x28\x1e\x16\xc2\x84\x36\x01\x0f\xae\xab\xf8\xe9\x8d\x94\x04\xb8\xbf\x7f\xd8\xda\x3f\x6c\x36\x65\x8a\x3a\x25\x64\x46\x73\x1b\x97\xd5\x60\xbd\xa9\xde\x87\xc4\xdc\xf6\x54\x90\x48\x13\x0a\x4b\x2b\x8a\x6c\x4b\x30\xed\xd3\xcb\x36\x97\x02\x85\x3c\xdc\x0d\x47\x8d\xe7\x52\xf9\xbd\x25\xaa\x1c\x85\x72\x27\xb0\x11\x47\x55\x5f\xfb\xe5\x6e\xfb\xc1\xab\x60\xd7\xa0\xb8\x5a\x45\x54\x5c\x77\x75\x5f\xfc\xe2\x6c\xdf\x6b\x3f\xfc\xcb\x39\xd8\x0e\x9d\xf2\x49\x48\x4f\xff\x98\xcf\xae\xb3\xb5\xb7\x8d\x2d\x9b\xbe\x6d\x6c\x11\x8b\xa3\xf9\xa0\xc2\x15\xa1\xdc\x97\x29\x24\xfa\xda\xac\x41\xe3\x99\x0a\x23\xc6\x95\x36\x98\xab\x6c\x0d\xca\x98\xf7\x05\x44\x1f\x2c\xa1\xf2\x6c\xef\x1c\x36\x7f\x0e\x6b\xe2\x3e\x24\xe4\x71\x3c\x7d\x07\x88\x25\x4b\x50\x6b\x7a\xb6\x9b\x66\x6d\x42\xa7\xc8\x90\x9c\x6f\xaa\xd6\x59\x18\xb3\x93\xb2\x3e\xb0\x17\x65\x8e\xde\x16\xc6\x31\xd9\x8c\xdf\xc6\x38\xa4\x55\xc4\x55\x39\xc8\x84\x9d\x44\x71\x13\xf6\x11\x6d\x8f\xb0\x8f\x5e\xb3\x08\x52\x87\xf4\xd6\xf1\xce\x91\xef\x3d\x07\x5a\x5c\x30\x9b\x63\x14\xef\x28\xaa\xa9\x3a\x86\x23\xc7\xb7\xbe\x54\xaa\xa6\xe0\x77\x48\xa1\x39\x85\xd8\x10\x19\x8c\x25\x47\x00\x03\x72\x18\x95\xe4\x6e\xe3\xb1\xa9\x14\x59\xe2\xca\xfd\x76\x9d\x9d\x1c\x17\xce\x88\x0d\xc3\x47\x65\x13\x12\x42\xb0\x7e\x5d\x28\x22\x5c\x87\x1c\x26\xe2\x5b\x96\xd6\x6a\x56\x15\x93\x99\x4a\x62\xb7\x0c\x27\x4f\x82\x93\x13\x7e\xdc\xfb\x45\xa4\x5b\xd4\x60\xc0\xaa\x00\xbf\x4c\x89\x4e\xb9\xc2\x15\xa5\x58\x72\x55\xe6\x8a\x87\x1a\xbf\xb8\x73\x9f\x2e\xe7\x57\x95\x2b\x73\xc0\xab\x32\x00\x27\xa0\x61\x62\x72\x62\xd1\xfb\x92\xf1\xff\xcc\x7b\xd7\xe6\x83\x2f\x28\x93\x86\x86\x7e\xea\xdc\xe9\x73\x65\x98\x3d\x07\xcb\x65\x94\x3d\x83\xd2\xd9\xff\x55\x96\xd2\x95\xb3\x67\x4f\xa1\x9e\x5d\xe7\x8f\xdd\xce\xce\x4d\xe7\xde\xe3\xe0\x42\x2f\x0b\x00\x14\x56\x3e\x4b\x2d\x0c\x2e\xce\x01\x10\x03\xbd\xc1\x34\x28\xd7\x79\xc2\x83\x9f\xcc\x44\x20\x05\x0c\x17\xc2\x88\x9a\x2a\x34\xcc\x44\x61\x1f\x4d\x94\xef\x49\xbf\x48\x74\xcc\x38\xdb\xbf\x75\xf7\x5a\x8b\x4b\xdd\xbd\x96\x73\xf3\xc9\x90\x3b\xda\x40\xc9\x23\x45\xf0\xe6\xf5\xd9\x97\x47\x4f\x76\x02\x6f\x81\xd1\x22\x69\x64\x1b\xb2\xb1\x62\xa7\x8f\xe1\x50\x56\x3f\xd6\x22\x18\x3f\xac\xc4\xa3\xc4\x64\x11\x94\x24\x33\x91\xe4\xf1\xcd\xf0\x70\x07\x80\x66\xb2\x63\x42\x0d\x45\xd0\xe0\xa6\x98\x6d\x6f\xcf\x1f\xfb\x6e\x31\x1d\x18\x25\x4f\xf6\xf2\xb3\xfd\x4c\x60\x32\xa1\xa0\xdc\xba\x8e\xc8\xfb\x34\x7e\xd2\xf1\x66\x70\x62\x26\x70\x60\xe6\x32\x84\x8d\x48\xf2\xab\x88\xc0\x58\x54\x52\x8e\x6c\x5d\x13\x4d\xc5\x37\x2f\xd7\xd8\x7b\xd1\xd4\x4b\xe2\x60\x5c\x19\x8b\xb6\x0a\x45\x6c\x4d\xc8\x16\x6d\xd8\x98\x22\xa6\x62\x12\x9f\xdf\x74\xc4\x56\x18\x4f\x83\x27\x11\xf6\x90\x6a\x2b\x6f\x81\xd1\xc3\x4c\x0f\x2d\x63\x0e\x39\x8f\x81\x05\x7d\x08\xa5\x7a\x1f\x46\x1b\xe1\xef\x00\x00\x00\xff\xff\x80\x04\x66\xfa\x95\x24\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
