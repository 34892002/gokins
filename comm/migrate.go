package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\xe6\xc2\x25\x9f\x9c\x9b\x12\x9f\x93\x99\x97\x8a\x47\x49\x71\x49\x62\x3a\x7e\xf9\xd4\x02\x3c\xd2\xb9\xa9\xc5\xc5\xf8\x0d\xc8\x2f\x4a\xc7\x2f\x1b\x5f\x90\x59\x80\xcf\x00\x90\x34\x01\x4f\xc0\x94\xc4\x97\xa5\x16\x15\x67\xe6\xe7\xe1\x53\x9a\x58\x94\x98\x8b\x47\xbe\xb4\x38\xb5\x88\x80\x34\x01\x2f\x81\x95\xe4\x16\x13\x54\x52\x92\x9f\x9d\x9a\x97\x60\x0d\x08\x00\x00\xff\xff\x1f\xf0\x6a\xe9\xdc\x01\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4b\x6f\xdb\x46\x10\xbe\xfb\x57\x2c\x72\xb1\x0c\x38\x80\xe4\x44\x69\x82\x9e\x9c\x84\x0d\x84\x2a\x72\xa1\xc8\x6d\x72\xa2\x56\xe4\x4a\xde\x46\x5c\x12\xbb\x4b\xd7\xbe\xc9\x68\xf3\x6a\x5a\xd8\x41\xf3\x44\x9a\x36\x2e\x8a\x06\x2d\xd2\x3a\x87\xd4\x40\x25\x03\xf9\x31\x31\x29\xf9\x94\xbf\x50\xf0\x21\x89\xa2\x1e\xdc\x55\x64\x14\x28\xe2\x8b\x25\x72\x66\xc4\x9d\xf9\xe6\xdb\x6f\x96\x17\x8a\xca\x72\x49\x01\xa5\xe5\xf3\x79\x05\x94\xb9\x5a\xb1\x71\x5d\x2f\x83\xd4\x1c\x00\x65\xac\x97\xc1\x3a\xa4\xda\x1a\xa4\xa9\x33\xa7\x17\x40\x61\xa5\x04\x0a\xab\xf9\xfc\xa2\x77\xd3\xc2\x16\xaa\x63\x82\xd4\x21\xab\xd5\x7c\x1e\x5c\x54\x3e\x59\x5e\xcd\x8f\x32\x5f\x47\x94\x61\x93\x08\xba\x31\x0e\xb9\xcd\xfa\x96\x99\x74\x7a\x84\x29\xb8\xb0\x72\xf9\xb2\x52\x28\x81\x79\xf7\xa7\x6f\x9c\x56\xb3\xfd\xed\xbe\xdb\xd8\x9a\xf7\x23\x20\x4a\x4d\xda\x0f\x90\x4d\x08\x70\x74\xff\x49\x67\x6f\xef\xf0\xcd\xae\xbb\xb5\x17\x06\x58\x47\x84\x8b\x3f\xc1\x61\xf3\xee\x61\x6b\x3f\x70\xe5\xd8\x40\x2a\xe3\xd0\xb0\xca\x40\x87\x1c\x79\xdf\x53\x09\x0b\xb8\xf3\xa2\xb3\xfb\x9d\xfb\x68\xff\xe8\xc1\x9b\x6e\x10\x5e\x47\xfd\xdf\x5f\xca\x66\x27\x07\x78\x7e\xeb\xe8\x97\xc7\x81\xab\x81\x18\x83\x35\x19\x67\x3f\x7d\xd1\xd5\x33\x0e\x29\x47\xba\xf0\xf3\x3b\x07\x0d\xe7\xc5\x5d\xef\xf9\x1f\xbd\x0e\x22\x54\x31\xc1\x6c\x4d\x22\x44\xbb\xf5\x83\xfb\xec\xe7\x68\x08\x8d\x22\x28\xf5\x10\xb7\x9f\x3a\xad\x66\x34\x82\x6d\xe9\x52\x11\xdc\xa7\xaf\xdd\x87\xaf\xa2\x11\x42\xdc\x8a\xe7\xb2\x7d\xe7\xb6\xfb\xe3\x4b\xdf\xf9\xb3\x62\xee\xf2\x72\xf1\x1a\xf8\x54\xb9\x06\x52\x5e\x5b\x2d\x80\xd5\x2b\xb9\xc2\x25\x70\xbe\x54\x54\x94\xb9\x85\x8f\xe7\xe2\x6d\xa8\x19\xba\xea\xb5\x8b\x48\x27\xd6\xa8\x69\x5b\x82\xfd\xe4\xb7\xb7\x70\xef\x21\xd1\xb0\xf1\x36\xcd\x8e\xca\xae\x6f\x49\x6c\xa3\x0c\x30\xe1\xa9\x4c\x66\x9c\x89\x66\x12\xee\xb7\x1c\x47\x1b\x3c\x72\x59\x08\x04\x12\xa0\x95\x41\xe7\x74\x55\x64\xdc\xef\x3e\x09\x32\x15\x66\xc7\x08\x54\xff\xde\x72\x5f\xbd\x6e\x37\xdf\x60\x7d\x7e\x8a\x1a\xbf\x37\xbf\x6e\x60\xae\x6a\xa6\x8e\xca\xa0\x82\x6b\x5e\x65\x97\x12\x18\xb6\xd1\x70\x6e\x35\xdb\xcf\x67\xc5\xcf\x04\x1a\x12\x0c\xe7\xec\x7c\xef\xfc\xf9\x28\xf0\xd4\x31\xb3\xea\x70\x53\x15\x89\xf0\x81\x0c\x67\x45\x86\x65\x93\xa8\xcc\xd6\x34\xc4\xa2\x84\x31\x2e\xe5\x26\x51\xab\x10\xd7\x6d\x8a\x04\x8c\x99\x49\x79\x0f\x86\x99\x49\xf4\x90\xbc\x29\x4e\xdb\xf1\xc8\x12\x69\x78\xc9\x1e\xad\x0d\xca\xac\xc4\x2e\x8d\x53\x82\x34\xd2\x67\x4a\x48\x41\x52\xc4\xfa\xeb\xff\xc5\x46\x49\x0b\x88\xb2\xd1\x07\x72\x99\x05\xb9\x20\x4a\x71\x8d\x98\x42\x74\x41\x6c\xa3\x82\xe8\x64\xa4\x84\x8a\xc4\x30\x20\xd1\x59\x5c\x92\xe8\xc8\x42\x44\x67\xaa\xf7\xb0\x5f\x32\x93\xf4\xef\x60\x43\x90\x62\xca\x88\xac\x63\x6a\x12\x03\x11\xce\xe2\x51\xc4\xf8\x4c\x9e\xa5\x7a\x73\x41\x32\x51\x41\xef\xee\xf9\xdc\xa5\x5c\xa1\xd4\xbb\x01\x96\x57\x4b\x2b\x6a\xae\x70\xa1\xa8\x78\x05\x08\xca\x2e\x41\x10\xce\xf6\xbd\xa3\xc6\x56\xa7\x71\xe3\xdd\xc1\x6d\x67\x7b\xaf\xfd\x7b\xf3\xdd\xc1\x1d\x89\x61\x67\x50\x25\xd6\x4d\x52\x1b\x2c\x0b\xdf\xb4\x90\x90\x18\x95\x90\x94\x98\x54\xcd\xa1\xfa\xdb\xb4\x9e\xc4\x15\xc3\x05\xf2\x32\xba\x08\x84\xea\x64\xd2\xda\x2c\x6b\x24\xc2\x4d\x23\xab\x30\xde\x52\x47\x4c\x2b\x83\x92\x72\xb5\x34\x6e\x23\xb1\x2b\x75\xac\x95\x41\xae\x50\x4a\xc5\x15\x7f\x3a\x02\x89\x1b\x2f\x9d\x83\x86\x0c\x07\x85\x3f\x5f\x47\xbe\xa9\xdf\x20\xf1\xf0\x51\x13\xd5\x0b\x24\x2d\xf2\xe5\x6a\xa5\x7a\xbb\x66\x58\x30\xbf\x26\x51\x62\x99\x50\x17\xcf\x55\xfc\x14\x45\x6a\x2b\xbe\xbf\x7f\xd8\xda\x3f\x6c\x36\xa5\x33\x2b\x5f\xb7\xe1\xcc\x0d\xe4\xcc\x33\xc9\x15\x2e\x2a\x57\x7b\xeb\x4d\x75\x3f\x24\xe6\xb6\xab\x46\x44\x9a\x41\x58\xe2\x50\x64\x99\x82\x69\x9f\x5e\x3e\x79\x54\x24\xe4\xe1\x11\xbf\x3a\x9e\xd3\xe4\x39\x3e\xae\xe0\x84\x72\x27\xb0\x21\xc6\xd5\x97\xfb\x72\xd7\x7d\xf0\x2a\x64\x6f\x8a\x6b\x35\x44\xc5\xf5\x4f\xe7\xc5\x6f\xce\xf6\x3d\xf7\xe1\x3f\xce\xc1\x76\xe4\xb4\x4d\x42\x02\x06\xc7\x6d\x96\xcd\xd6\xde\x36\xb6\x2c\xfa\xb6\xb1\x45\x4c\x8e\xe6\xc3\x0a\x57\x85\x72\x5f\xa1\x90\x68\x6b\xb3\x06\x8d\x6f\x2a\x8c\x18\x4f\x62\x60\xae\xb2\x35\x28\x63\xde\xdb\xc8\x7b\x60\x89\x94\x67\x7b\xe7\xb0\xf9\x6b\x54\x9b\xf6\x20\x21\x8f\xe3\xe9\x3b\x40\x2c\x59\x82\x9a\xcf\xb7\xdd\x34\xea\x13\x3a\x45\x86\xe4\x02\x53\xd5\x66\x51\xcc\x4e\xca\x7a\xdf\x5e\x94\x39\xba\x1b\x14\xc7\x64\x73\xfc\x26\xc5\x21\xad\x21\xae\xca\x41\x26\xea\x24\x8a\x9b\xa8\x8f\x68\x7b\x44\x7d\xb4\xba\x49\x90\x3a\xa0\x7b\x8e\x77\x9e\x7b\xef\x79\xcc\xe4\x82\xd9\x1c\xa1\x3c\x87\x51\x4d\xd5\x11\x1c\x39\xba\xf5\xa5\x52\x35\x05\xbf\x43\x0a\x8d\x29\xc4\xc6\xd4\x22\x70\x7c\xea\x74\xc8\x61\x5c\x1a\x7b\x8d\xc7\xa6\xd2\x5b\x89\x2b\x0f\xda\xf5\x3f\x90\xc5\x16\x8c\x1e\x59\x4d\x48\x08\xc1\xda\x75\xa1\x88\x70\x1d\x72\x98\x88\x6f\x59\x5a\xab\x9b\x35\x4c\x66\x2e\x78\x4f\x9e\x04\x27\x27\xfc\x79\xf7\x8b\x48\x33\xa9\xce\x80\x59\x05\x41\x99\x12\x9d\x72\x85\x2b\x4a\xb1\xe4\xa9\xcc\x15\x1f\x35\x41\x71\xe7\x3e\x5f\xce\xaf\x2a\x57\xe6\x80\x5f\x65\x00\x4e\x40\xdd\xc0\xe4\xc4\xa2\xff\x25\x13\xfc\x9b\xf7\xaf\xcd\x87\x5f\x50\x26\x0d\x75\xed\xd4\xb9\xd3\xe7\x2a\x30\x7b\x0e\x56\x2a\x28\x7b\x06\xa5\xb3\x1f\x55\x97\xd2\xd5\xb3\x67\x4f\xa1\xae\x5d\xfb\xaf\xdd\xf6\xce\x4d\xe7\xde\xe3\xf0\x42\x37\x0b\x00\x14\x56\xbe\x48\x2d\xf4\x2f\xce\x01\x30\x06\x7a\xfd\xa9\x4c\xae\xf3\x84\x86\xe4\xd0\x50\x78\x22\x90\x02\x86\x07\x61\x44\x0d\x15\xea\x46\xa2\xb0\x8f\x27\x2a\xf0\xa4\x5f\x25\x3a\x66\x9c\xed\x3f\x3a\x7b\xad\xc5\xa5\xce\x5e\xcb\xb9\xf9\x64\xc0\x1d\x6d\xa0\xe4\x91\x22\x7c\x03\xfa\xec\xeb\xa3\x27\x3b\xa1\xb7\xc0\x68\xd1\x1b\x2e\x6c\x7f\xb2\xb0\x27\xda\x98\x63\xa7\x8f\xc1\x50\x66\x2f\xd6\x22\x18\x3d\xac\x8c\x47\x89\xc1\x62\x28\x49\x66\x22\xc9\x63\x94\xc1\xe1\x0e\x80\xb2\xc1\x8e\x09\x35\x14\x41\x9d\x1b\x62\xb6\xdd\x3d\x7f\xe4\x3b\xbe\x74\x68\x94\x3c\xb7\xcb\x4f\xee\x33\x81\xc9\x84\x82\x72\xf3\x3a\x22\xef\xd3\xf8\x49\xc7\x8c\xe1\xc9\x95\xc0\xc1\x95\xc7\x10\x16\x22\xc9\xaf\x04\x42\x63\x51\x49\x39\xb4\x75\x4d\x34\x15\xdf\xbc\x3c\x63\xff\x85\x4f\x37\x89\xfd\x71\x65\x24\xda\xaa\x14\xb1\x35\x21\x5b\xb4\x61\x61\x8a\x98\x8a\xc9\xf8\xfc\xa6\x63\xb6\xc2\x78\xea\x3f\x89\xb0\x87\x54\x5b\xf9\x0b\x8c\x1f\x2a\xfa\x68\x19\x71\xd8\x78\x0c\x2c\x18\x40\x28\xd5\xfd\x30\xdc\x08\xff\x06\x00\x00\xff\xff\x2f\x8f\xd7\xda\x1d\x24\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
