package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\xe6\xc2\x25\x9f\x9c\x9b\x12\x9f\x93\x99\x97\x8a\x47\x49\x71\x49\x62\x3a\x7e\xf9\xd4\x02\x3c\xd2\xb9\xa9\xc5\xc5\xf8\x0d\xc8\x2f\x4a\xc7\x2f\x1b\x5f\x90\x59\x80\xcf\x00\x90\x34\x01\x4f\xc0\x94\xc4\x97\xa5\x16\x15\x67\xe6\xe7\xe1\x53\x9a\x58\x94\x98\x8b\x47\xbe\xb4\x38\xb5\x88\x80\x34\x01\x2f\x81\x95\xe4\x16\x13\x54\x52\x92\x9f\x9d\x9a\x97\x60\x0d\x08\x00\x00\xff\xff\x1f\xf0\x6a\xe9\xdc\x01\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x6f\xdb\xc6\x12\xbf\xfb\x53\x10\xb9\x58\x06\x12\x40\x4e\xe2\xbc\x04\xef\xe4\x24\x7a\x81\xf0\x1c\xb9\x70\xe4\x36\x39\x51\x2b\x72\x25\x6f\x23\x2e\x89\xe5\xca\xb5\x6f\x32\xda\x34\x49\xd3\xc2\x36\x9a\xbf\x48\xd3\xc6\x45\xd1\xa0\x40\x5a\xe7\x90\x1a\xa8\x6c\x34\x1f\x26\x96\x64\x9f\xf2\x15\x0a\x52\x22\xb5\x5c\xfe\x1b\xd2\x4e\xdb\x43\x78\x30\x04\x73\x66\xb8\x3b\xf3\x9b\xdf\xcc\x2c\x79\x69\xa1\x34\x5b\x2d\x29\xd5\xd9\x8b\x73\x25\xa5\xc6\xd5\x7a\x9b\xb4\xf4\xda\x44\x61\x42\x51\x14\xa5\x46\xf4\x9a\x12\xba\x96\x11\xd3\x96\x10\x2b\x9c\x3b\x3b\xa5\x54\xe6\xab\x4a\x65\x71\x6e\xee\xe4\x50\xde\x22\x16\x6e\x11\x8a\x55\x51\x31\x20\xbf\x38\x37\xa7\x5c\x2e\xfd\x6f\x76\x71\x2e\x5a\x71\x19\x33\x9b\x98\xd4\x35\x00\x51\xb4\x39\xe2\x6d\xbb\x16\xbd\xc2\xe9\x62\x31\x42\x53\xb9\x34\x7f\xf5\x6a\xa9\x52\x55\x26\xfb\xdf\x7f\xd1\xdb\xed\x0e\xbe\xda\xe9\x77\xd6\x26\x47\x06\x31\x63\x26\x93\x77\xed\x19\x9c\x49\x31\x78\x78\xff\xc9\xc1\xf6\xf6\xfe\x9b\xad\xfe\xda\xb6\x6f\x70\x19\x53\x1e\x67\x30\x6d\x85\xfb\xdd\x7b\xfb\xbb\x3b\x9e\x29\x4e\x0c\xac\xda\x1c\x19\x96\x60\x4f\x47\x1c\x3b\x37\x0a\x29\x7b\xbd\xfb\xe2\x60\xeb\xeb\xfe\xa3\x9d\xc3\x07\x6f\xc6\xf6\x78\x0b\xc7\x2d\xed\xf4\xcc\x4c\xb2\xc1\xe7\xb7\x0f\x7f\x7c\xec\x99\x32\xb0\x6d\xa3\xa6\x64\x0c\x6c\xca\x8d\x43\xd0\x6d\x36\x47\x8c\x63\x09\x7f\xc0\xbd\xf6\xf6\x3a\xbd\x17\xf7\x9c\xbd\x3e\x7a\xed\xd9\x6b\x10\x4a\xec\x25\xc9\x20\xd0\xde\x60\xf7\xdb\xfe\xb3\x1f\x82\xf6\x34\x86\x51\xee\xf5\xdd\x79\xda\xdb\xed\x06\xed\xb5\x2d\x3d\xb7\xbd\xfe\xd3\xd7\xfd\x87\xaf\x82\xf6\x46\x89\x94\x2f\x20\x83\xbb\x77\xfa\xdf\xbd\x1c\x99\xfa\x68\xa1\x7c\x75\x76\xe1\x86\xf2\xff\xd2\x0d\xa5\xe0\x50\xc2\x94\xb2\x78\xad\x5c\xb9\xa2\x5c\xac\x2e\x94\x4a\x13\x53\xff\x9d\x90\x49\x44\x33\x74\xd5\xc9\xe6\x08\x1e\x49\x20\x8f\x26\x33\xdb\x16\x38\xf1\x5d\xa2\xca\x40\x13\x78\x68\x3a\x23\xa9\x8c\x13\x3f\x5e\x9a\xb6\x8d\xd1\xee\x08\xe5\x85\xe9\xe9\x78\x49\xcd\xa4\x7c\x48\x06\x1c\xaf\xf0\xc0\x1d\x1f\x4d\x89\x21\x0f\xe5\x06\x44\x7a\x8c\x7c\x80\x74\xf6\x60\xdb\xdc\xc9\xfb\x23\x57\x0c\x30\xf1\x0b\xb0\xff\x7d\xad\xff\xea\xf5\xa0\xfb\x86\xe8\x93\x21\x54\xc4\x3d\xfe\x6f\xab\x23\x2b\x84\xab\x9a\xa9\x07\x28\xb1\x4e\x9a\x0e\x46\x4e\xa7\x54\x91\x4e\xa7\x77\xbb\x3b\x78\xfe\xfe\x6a\x12\x45\x46\x88\xf7\xc1\xe4\xd0\xdb\xf8\xa6\xf7\xeb\x23\xcf\x94\x4e\x6c\xab\x85\x56\xd5\x80\xc9\x64\x53\x1f\x18\x3e\xb3\xbd\xf7\xcb\xf0\x35\x93\xaa\x76\x5b\xd3\xb0\x2d\x66\x80\x0f\xb0\xf8\x10\x9a\x54\x6d\x20\xd2\x6a\x33\x9c\x4d\xcf\x36\x59\xa8\x25\xf2\x92\x63\x3a\x99\xf8\xe4\x1e\x03\x06\xb6\x3c\xb4\x86\xad\xdc\xac\x76\x14\x1a\x6a\xe2\x38\xc5\x54\x1a\x0a\xf3\x61\xfe\xec\x3c\x66\x62\x76\xdd\x19\xe7\xc1\x34\x9a\xf8\xc0\xcc\xb0\xdd\x06\x99\xf9\x03\xbf\xfe\x6b\xf8\x15\x33\x46\x9a\xd4\x0c\xd0\x24\x84\x27\x69\xdb\xa8\x63\x19\x5f\x49\x50\xf5\x1b\x4d\xc3\x40\x54\x0f\x66\x8d\xdc\x73\xea\xd8\xc2\x54\xb7\xd5\xc0\x16\x3f\xb5\x4d\x2a\x0a\x11\x23\x27\xe3\xd6\x30\x5d\x26\xcc\xa4\x06\xa6\x7c\xbc\x0e\xd9\x7c\xce\x42\x90\x9d\xce\xbd\xf9\x34\xc4\xe8\x09\x2c\x8e\x3c\xa1\x8b\xe5\x2b\xe5\x4a\x75\x28\xef\xc9\x28\xb3\x8b\xd5\x79\xb5\x5c\xb9\xb4\x50\x72\x22\xee\x61\xd0\x53\x01\x32\x65\x6f\x7d\xf3\xb0\xb3\x76\xd0\xb9\xf5\x6e\xef\x4e\x6f\x7d\x7b\xf0\x4b\xf7\xdd\xde\xdd\xd0\x78\x0e\xf2\xb7\x3f\x5c\xb4\x4c\xda\x94\x63\xcd\x57\x2d\x0c\x1e\x68\xfc\xc4\x84\x4c\x17\x84\x36\x4c\xd7\xb2\xfc\xc8\x36\x6b\x05\x5d\x11\x4d\x87\x51\x01\x75\x1c\x7f\x52\x01\xc5\xd5\x64\xcd\x98\x2a\x0d\x09\x6c\xde\xe8\xa6\x87\x38\x92\xce\xfd\x38\x26\x78\xa2\xa6\x63\x5b\x1b\xab\x54\x4b\xd7\xab\xf1\x35\xba\x5d\x6f\x11\x5f\xb8\x5c\xa9\x16\xe4\xe1\xb3\x28\x40\xed\xd6\xcb\xde\x5e\x27\x9a\x7c\x8f\x8d\x75\x8f\x40\xb7\x3a\x6e\xe1\xb1\x21\x97\x00\xe4\xcd\x04\x25\x55\xe7\x41\x39\x86\xda\x18\x74\x0d\x45\xcb\x95\xcb\xa5\xeb\xe3\x18\xbb\x21\x2f\xb8\x7f\x21\x50\x54\x9d\xae\xc9\xc7\xa3\x0f\x33\x91\xb1\x13\x01\xe6\x98\x00\x9f\x52\x38\xcf\xca\xd4\x95\xdd\xdf\xd9\xdf\xdd\xd9\xef\x76\x43\x18\x80\xe4\xb9\x8f\xb5\x2c\x30\x0b\x3b\x3e\xd1\xe5\xde\xfe\x0b\xde\x8f\x54\x9f\x7b\x5d\x6a\x6c\xa7\x9e\xc0\x02\x72\xab\x15\x60\xd9\xa8\xc4\x94\x7a\xe9\x34\x79\xbf\x83\x76\xc8\xb7\x96\x2e\xef\xd4\x46\x75\x7c\x44\xe4\xf3\x78\x20\x5a\x6a\xdb\xc6\x2c\x14\xf5\x1c\x25\x32\xd6\x95\x5e\xc3\x9f\x3c\xfc\x24\x7b\x36\xaa\x6d\x81\xf6\xd8\xc3\x96\xbd\xff\x72\xab\xff\xe0\x95\x5f\x09\x19\x69\x36\xc3\x16\xa1\x7d\xf1\xc1\x8b\x9f\x7b\xeb\x9b\xfd\x87\x7f\xf4\xf6\xd6\x03\xc7\xf2\xf2\x58\x91\xf5\x60\xde\x6a\xdb\x4b\x6f\x3b\x6b\x16\x7b\xdb\x59\xa3\x26\xc7\x9e\x71\x86\x1b\x51\x3e\x03\xd5\xf1\x3a\x43\x54\x5b\xca\x37\x2b\x31\x6c\x99\xf2\xf4\x08\xac\x54\xae\x6a\x78\xfa\x00\xb6\x1e\x86\x41\xb8\x6a\x2f\xa1\xc8\xb9\x15\xa2\x2b\xbf\x3f\xf0\xbb\x09\x01\x18\xeb\x1b\xfb\xdd\x9f\x82\xe3\x92\x0f\xda\x98\x42\x0b\x9a\x70\x83\x89\x9d\x4d\x37\xa1\xe7\x88\x51\x8d\x1c\x2b\x80\x4b\x5e\x35\x5a\x22\x43\x78\x57\x54\xc7\x17\x39\x5d\xc1\x0e\x8c\x05\xa6\x89\xe5\x47\x80\xae\xe8\x1b\x88\x63\x82\x0d\x80\x7f\x71\x42\x57\x93\xba\x01\x8e\x58\x13\x73\x55\xc6\x2f\x68\xb5\xa2\xae\x80\xde\xcc\xba\x42\xbe\x67\xd6\xd5\x5a\x26\xc5\xaa\xdb\x2d\xe7\x3f\x0f\x79\x0f\xef\x3c\x8f\x78\x8e\x61\xf2\xf0\x39\x06\xd4\x3b\x51\xaf\x25\x01\xf5\x96\xa9\x51\x85\x47\xa8\x3a\x71\xb4\x27\x84\x20\xc3\x3a\xb3\x0f\xa1\x16\x62\xc8\x90\xdb\x43\x70\x73\x38\x02\x77\x72\xa0\x83\x2e\x04\xb9\x5b\x47\x1c\x45\xbc\x92\x72\x58\xc2\xce\xd9\x5e\xa7\x7a\xc2\xe5\x96\xa8\x06\x03\x38\xb5\xc1\x67\x36\xb1\x30\x80\x5c\x67\xa1\xf1\x29\x38\xc8\x7f\x94\x68\x37\x33\x3d\x01\x2d\x23\x8e\x18\x7c\x38\x0e\x70\x39\x84\xc0\x5b\x66\x93\xd0\x63\x1e\x8f\x9c\x28\x9e\x3a\xa5\x9c\x4a\xb8\x9c\xfb\x0b\x58\x33\x99\x6e\x2b\x66\x43\x19\x46\x39\x55\xa9\x5c\xb9\x56\x5a\xa8\x3a\x63\xc5\xfc\x18\x19\x1f\xcf\xce\x2d\x96\xae\x29\x85\x13\x48\x37\x08\x3d\x31\x5c\xa7\x73\x4d\x8f\x7f\x4e\xba\xf7\x26\x85\x7f\xe0\xe9\x22\xd2\xb5\x33\x17\xce\x5e\xa8\xa3\x99\x0b\xa8\x5e\xc7\x33\xe7\x70\x71\xe6\x3f\x8d\xd3\xc5\xc6\xf9\xf3\x67\xb0\x28\x3b\xf8\x6d\x6b\xb0\xf1\x65\x6f\xf3\xb1\xf0\xcf\xb1\x4b\x86\xb8\xfa\xa4\x30\x15\xbc\x19\x83\xe4\xc0\x29\x84\x00\x53\x70\x6a\xb7\x63\x5e\x90\xc7\xbd\x76\xf1\xc6\x44\x98\xb8\x00\x1f\xd0\xa4\x87\x99\xa1\x22\xdd\x48\x9f\xf5\x64\x1f\x0e\x55\xd9\x67\xb5\xf4\xd3\x88\xc1\xde\xc3\x83\x3f\x37\xfb\xcf\x3e\x3f\x7c\xb2\x11\xd0\xc6\x2b\x58\xab\xa5\x69\x8f\x3e\x66\x11\xb5\x33\x8e\x9a\xf1\xa3\x7d\x84\xa4\x19\x3b\x93\x46\x99\x35\x7d\xbb\x27\x15\xf0\x20\xeb\xc2\xc8\xb0\x23\x61\x34\xe6\xbb\x63\x3b\x9e\x4a\x38\x15\x30\xec\xa6\x9a\x0d\x8e\x19\xce\x92\xfc\xaa\x8b\x74\xee\x7d\x35\x01\xfd\xe4\x41\xe8\x7a\x22\x3f\xb4\x28\xfe\x13\x07\x49\xc7\x7b\x84\xe4\xa2\x80\x9b\x37\x31\x8d\xc1\x41\x2e\x4a\x91\xf5\xe2\x7a\x86\xe1\x31\x85\x8c\x9f\xa4\x93\x62\xd3\xc2\x34\xa2\xcb\x4f\xac\x7e\xd2\x8c\x99\xb9\xc4\x42\x75\xc4\x2a\x0b\x2d\xb4\xc8\x7d\x07\x3e\x8a\x80\x38\x84\x46\x62\xb8\xc1\xb0\xbd\xe4\x09\x27\xca\xe2\x15\x8b\x30\x6c\xab\x64\x38\xf6\xc5\x05\xa3\x28\x89\x0f\x71\x09\xcc\xa8\xd1\x6a\xe0\x2a\xd2\x84\x08\x51\x71\xf7\x6a\x87\x87\x74\x1f\x73\xde\xcb\x80\xa8\xdb\x79\x92\x27\x03\x4b\x8b\x80\x2c\x78\x3f\xe4\x8c\xfb\x2b\x00\x00\xff\xff\x21\xb8\x03\xe3\xef\x2a\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
