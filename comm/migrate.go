package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcd\x0a\x83\x30\x0c\xc0\xf1\xfb\x9e\xa2\xef\xe1\x69\x63\x0e\x84\xc1\xc6\xf4\xb0\x5b\xcd\x6a\x94\x62\xbf\x68\xa2\xe0\xdb\x0f\x07\xbb\xa6\x9e\xff\x3f\x62\x62\xaf\xaf\xc7\x53\x75\xe7\xcb\xbd\x56\xcd\x4d\xd5\xef\xa6\xed\x5a\xd5\xb3\x86\xcc\x76\x04\xc3\x3a\x81\x99\x61\xc2\xbe\x3a\x15\xe9\x8a\x99\x6c\x0c\x07\x68\xcc\x9b\xa0\x3e\x8b\x75\x83\xd0\x8d\x1f\xb4\xb3\x41\xda\x89\x58\xde\x99\x18\x93\x90\x3d\x12\xc9\x03\x62\x9e\xe4\xaa\x93\x4d\xd2\x80\x3d\x17\x8e\xf8\x13\x6d\x62\x18\x8f\xb8\x15\xf2\x21\x56\x7c\xa7\x04\x19\xbc\xd0\x17\x42\xe9\x4b\x7b\xd6\x36\x8c\xb1\x64\xe4\xbf\xf8\x23\x9e\x8a\x84\xe3\x8c\xd2\x35\x9b\x77\x3a\xb9\x65\xb2\x25\xc4\xe8\x93\x03\xc6\xbe\xfa\x06\x00\x00\xff\xff\x77\xfa\x94\x72\x17\x03\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6f\x6f\xdb\xc6\x19\x7f\xef\x4f\x41\xf4\x8d\x65\xa0\x2e\x64\x27\xee\x92\x0c\x05\xe6\x24\x5a\xa6\xcd\x91\x07\x5b\xee\x5a\x20\x80\x78\x12\x4f\xd4\x35\xe4\x1d\x71\x3c\xc9\x31\xb0\x17\x36\xb6\x6e\xc9\xba\xa1\xc9\xd6\x35\x2d\xba\x6e\x33\x0a\xac\x18\x90\xce\x79\x91\x19\x85\xed\xad\x1f\xa6\x96\x9c\xbc\xea\x57\x18\x48\x8a\xff\xef\xc8\x23\xc5\x34\x69\x67\xbe\x48\x0c\xe9\xb9\x47\x77\xcf\xfd\x7e\xbf\x7b\x9e\xe7\x78\x6d\xa3\xb1\xda\x6e\x28\xed\xd5\xab\x6b\x0d\x45\x65\x1d\x40\x19\xea\x83\x1e\xeb\x58\xa0\x77\x1b\xe8\x50\x55\x6a\x73\x8a\xd4\xa3\x22\x4d\x55\x46\x80\xf6\x06\x80\xd6\x5e\xbf\xb8\xa0\xb4\xd6\xdb\x4a\x6b\x6b\x6d\xed\x55\x59\x07\xc0\xf1\xd0\x45\x3a\xc2\xac\xb6\x5c\x0f\x1d\x28\xab\x5b\xed\xf5\x4e\xb3\x75\x6d\xa3\x71\xb3\xd1\x6a\x4b\xfb\xa3\xd0\x22\x9d\xe4\xac\xae\x37\x7e\xbc\xba\xb5\x56\x70\x66\x18\x98\x30\x74\xb3\x54\xaf\x97\xf4\xa3\x21\xdb\x32\xc0\x4e\x27\xee\x6f\x79\x65\xa5\xac\x3f\x68\xf7\x42\x3f\x2b\xa5\xe7\x65\x00\x06\x6d\xf6\x26\xa4\x36\x22\xb8\x82\x78\xc5\xfc\x6d\x0e\x40\x15\xb1\xeb\x51\x08\x18\xd4\x54\x45\x03\x0c\x32\x64\xc2\x72\x6e\x86\x96\x56\x85\x1b\x0d\x1a\xb0\x3a\x37\x1d\xc7\xc3\x8c\xbe\x7e\xbe\xd1\xbc\xb9\xba\xf1\xb6\xf2\xb3\xc6\xdb\x4a\xcd\xe5\xd2\xab\x0e\x25\x17\x64\xc7\x3b\xe3\x54\xcb\xa1\x4b\x2d\x60\xce\xc2\xdc\x82\xd2\x68\xdd\x68\xb6\x1a\x6f\x34\x31\x26\xd7\xaf\x06\x33\xbb\xf6\x93\xd5\x8d\xcd\x46\xfb\x8d\x21\xeb\x5f\x32\xbb\x17\x7f\x38\x27\x14\x92\x91\x8f\xaa\x73\x21\x51\xd4\xa9\xaa\xbe\x5c\xaa\x34\x4a\xf2\xbe\xbc\x2b\xbb\x1a\xae\x57\xa5\x6b\x16\x85\x23\x04\xb7\x55\xc5\x41\xc2\xd2\xf7\x4b\x78\x66\x59\xd2\xb7\x20\x3b\xb3\x2b\x07\xa1\x3b\x52\xa2\x31\x8b\x5e\x54\x28\x15\xea\x70\x46\x52\xab\x84\xea\xb3\x0a\x83\x8a\x34\x88\x19\xea\x23\x48\xa3\xfc\x29\xee\x27\x91\xa1\x94\x60\xa0\x93\xec\x80\xae\xc1\x81\xea\x7c\x7d\x5e\xb9\xb6\x7e\xd3\x89\xab\x32\x3f\xf9\xe8\x60\x7c\xff\x1f\xe3\xff\xfc\x71\xb2\xff\x59\x6d\xc9\xfb\xff\x97\xf5\xc9\x17\x9f\x8d\xbf\xfc\x72\x61\x5e\xe6\x77\x6c\x32\xa4\x3d\x38\xdb\x72\x67\x17\x1c\xd5\x20\x3a\x99\x2d\xa7\x9b\x5d\x69\x66\x17\x99\x59\xf5\xa5\x22\x69\x11\xa9\x8a\xb2\xb5\xd9\x6c\xdd\x50\xae\xb6\x37\x1a\x8d\xf2\x0a\xd3\x1d\x22\x43\x53\xe7\x3c\x6d\x71\xe5\x23\xf5\x88\xf5\x44\xb5\x90\x05\x0d\x84\xbd\x43\x9c\x6b\xef\xe8\x47\x7a\xc1\xe1\xc0\xe9\x81\x9b\x22\xbb\x68\xa0\xcd\x00\x1b\xda\x2a\x7f\x86\xee\x29\x9b\x1a\x19\x21\xd8\x5f\x7f\x3d\x3e\x3e\x3a\xfb\xdd\xe1\x64\x77\x6f\xca\x27\x15\x52\x4a\x68\x72\xd5\x31\xf4\x67\x38\x7c\xf6\xc1\xc7\x4f\x0f\x0e\x4e\xbf\xda\x9f\xec\x1d\x04\x0e\x47\x10\x33\x91\xc3\xbc\x19\x9e\x1e\xbd\x77\x7a\x7c\x38\x1f\x2e\x96\xba\x00\x8c\x3e\x3e\x8e\x6a\xd9\x9e\xc6\x27\xbb\xe3\xcf\xdf\x9b\x3c\x3c\x7c\xf6\xf0\x89\xef\xaf\x8f\x30\xb2\x07\x09\x87\x92\xfe\xce\x8e\xff\x34\xf9\xf4\x6f\x71\x7f\x01\x49\xcb\xcc\xef\xee\x27\xe3\xe3\xa3\xb8\xbf\x80\xb2\x25\xfc\x4d\x3e\x79\x32\xf9\xf0\x71\xdc\x5f\x90\xcd\xf1\xb6\xc2\x95\xa5\xac\x05\xdf\xbb\x3b\xf9\xcb\xa3\xa9\xab\x38\x09\xab\xa3\x5f\xcf\xd4\x3a\x0e\x0f\x38\x0c\xcc\xa0\x9d\x4e\xc9\xd0\x92\xa6\x8c\x4b\xf1\x02\x04\x83\x9e\xeb\x82\x74\x8c\x1e\x39\x22\x6b\x3c\x34\xa7\xab\x73\x15\x75\x49\x6c\xd9\x23\x1a\x54\x25\x2d\x31\xf3\x08\xc7\xe0\x1d\x16\xfb\x26\x40\x67\x26\x84\x52\x5c\x93\xb1\x0e\x99\x24\x61\xfd\xbc\xc0\x63\x33\xa0\xf3\x90\xc3\x01\x7b\x96\x76\x4b\x4b\x70\x84\x6c\xff\xde\x9b\x3c\x7e\x72\x76\xf4\x15\xd2\xe6\x53\x28\x13\xfd\xfc\x77\x56\xd1\xbd\x04\x50\xe0\x30\x4f\x46\xc6\xf7\xff\x30\xfe\xe2\xa1\xef\x2a\xde\xf5\x92\x72\x75\x7e\x16\x14\xf6\xc7\x3b\x0b\x6c\x42\x53\xa7\x72\xae\xb8\x78\x0c\x2b\xb4\xf3\xcf\x9b\xf2\xd0\x2a\xcd\xf8\x59\x28\xaa\x43\xd1\xc0\x5c\x8a\xa6\xb5\xa2\x3c\x0b\x2a\x16\x2d\x37\x9c\xa2\x08\xe6\xd1\xb1\x62\xd5\xaa\x2e\x6d\x84\x77\x10\xeb\x84\x27\x68\x0e\xd4\x23\xda\xb7\xbb\x3b\xfe\xed\xd1\xd9\xdf\x5f\x90\x92\xe6\x2d\x32\xae\xa4\xe7\x7a\xf8\xb2\xe4\xc6\x0e\x4c\x90\x8e\x09\x95\xc3\x5b\x90\xb7\x99\x26\xc0\x5a\x9c\x42\xc9\x14\x6e\x1b\x20\x96\x24\x99\xf2\x8e\x4d\x70\x8c\x8a\x25\x94\xfd\x79\xe9\xb3\x09\x6d\x9b\x9b\x94\x65\xc8\x32\xf0\x8d\xae\x36\x6f\x34\x5b\x6d\xcf\x3e\xb3\xf9\xe6\xf5\xd7\x52\x6e\x33\x00\xf5\xfe\x83\x67\xbb\x7b\x4f\x77\xdf\xfd\xe6\xe4\xee\xf8\xfd\x83\xb3\x7f\x1e\x7d\x73\x72\xcf\xdf\x3e\x86\x98\x01\x55\x59\xe1\x0b\xf2\x6d\x83\x60\x3d\xb9\x5f\x6c\xc7\x82\xd2\xd5\x40\xaa\xc5\x93\x95\x70\x23\xdc\x27\xae\xe7\xe4\x4f\x0e\xa9\x11\x0f\x05\x5f\x97\x78\xdb\xee\xf6\x52\x94\x0a\x77\x9f\x50\x5d\x70\x38\xcb\x6c\x7f\x59\x0c\xe4\x03\x81\xab\xbe\xb1\x86\xa6\x68\x88\xd7\x0c\xf4\x9f\x76\xe3\xad\xb6\xf8\x68\x1e\x76\x0d\x14\x18\x37\x5b\xed\x5a\x92\x7e\xf5\x08\x20\xdf\x7d\x34\x3e\xd9\xe5\x6b\x65\x65\x22\x39\x83\x3a\x06\xad\xbf\x50\x4c\x92\x8b\x89\x5b\x26\x9a\x7c\xd2\xd5\xa0\x00\x83\x9e\x69\xb3\x75\xbd\xf1\x56\xb8\xc7\xee\x96\xd7\xdc\x7f\xab\x03\x6c\xc7\x49\xa9\x02\xd4\x06\x60\x94\xbd\x07\x08\x3a\xf5\xd2\x6d\xbf\x42\x29\xdb\x07\x87\xa7\xc7\x87\xa7\x47\x47\x29\xa4\xc8\x68\x46\x80\xc8\x22\x60\x4c\x6f\x4f\xe6\xc6\xf8\xeb\xaf\xf9\x7f\x54\xb4\x33\x7e\xa2\x2b\x4a\xf6\x33\x04\x65\x28\x96\x9e\x7c\x55\xc8\xeb\xda\x27\x73\xf7\x3c\xf3\x20\x61\x77\x8e\x86\xdc\x3b\x01\x75\xc7\x34\x3a\x61\x47\x27\x38\x63\x7c\xa9\xec\xf5\xa0\x6d\x77\x18\xb9\x0d\xb1\xc4\x6f\x07\x47\x83\xdc\xca\x86\x36\xa4\x91\x60\xe4\x99\xcb\xdc\x50\x24\x74\x84\x73\xfb\xc3\x55\x91\xd0\xa5\xf3\x7c\x7b\xd9\x4b\xb0\x59\x3d\x82\xfb\x69\x4d\x08\x96\x90\xaf\x0a\xf1\x8b\x81\x2c\xb0\xc6\xf6\x28\x2f\xe6\x71\x00\x14\x03\x53\x02\x4b\xf1\xdd\xce\x71\x95\x23\x0a\x15\x44\xdc\x4f\xc7\x33\x6b\xfb\xcc\x48\xe2\xa1\xd9\x85\xa9\x6a\x2d\x2a\xe4\x59\xc5\xe8\xe4\xd1\xfe\xe4\xcf\x8f\x63\xc5\x68\x2a\xf1\x16\xbf\xcd\x90\xac\x44\xad\xa1\x3d\xf8\x7a\x77\xcf\xa2\x5f\xef\xee\x61\xc2\x60\x50\xb4\x0d\x00\x6f\x59\xd2\x22\x22\xc8\x60\xf2\x86\x15\x7a\xd7\x8c\x7f\xa9\x95\xaf\xa3\xdc\x82\x4a\x42\x46\x42\xb5\x8b\x3e\x09\xb4\x72\xab\xc9\x5c\x9d\x48\xca\x8f\xff\x30\x84\x77\x84\x52\x64\xd1\x0e\x0f\x4a\x02\x1c\x4d\x07\xb9\xaf\x05\xf5\x0c\x82\x61\x27\xca\xe8\x42\xb4\xaa\x90\x55\x80\x02\x33\xa9\x5f\xd2\x19\x4d\xe2\x64\xe3\xb7\x25\xe2\xb5\x93\x54\xe5\xa4\x01\x06\x38\xd7\x14\xce\xfe\xd9\x25\x33\xc7\x8a\xe2\xe5\x68\x21\x57\x79\x24\xcb\x16\xf9\xa2\x25\x4a\x60\xa9\x00\x5b\xc0\xb6\x93\x03\x32\xa3\x8c\x51\xef\x76\xa1\x5f\x00\x23\xc0\x00\x95\xaf\x21\x63\x5c\x94\x49\x43\x0d\xa2\x23\x2c\x5f\x1f\xa8\xa0\xc7\xd0\x28\x7a\xfb\xc5\x61\x69\xc5\x85\xec\xe2\xa2\xb2\x98\xf1\xcc\x35\x5b\x9b\x8d\x8d\xb6\x93\x47\xaf\x87\x78\x79\x73\x75\x6d\xab\xb1\xa9\xd4\x5e\x01\x9a\x89\xf0\x2b\xe1\xab\x0c\x4b\xe1\x9f\xf3\x3a\xb9\x8d\xb0\x1d\x79\x79\x65\x1e\x2e\xd5\x81\xd6\xbb\x70\xf9\xe2\xe5\x2e\x58\xb9\x0c\xba\x5d\xb8\xf2\x3a\xac\xaf\xfc\xa0\xbf\x5c\xef\x5f\xba\x74\x01\x46\x6d\xcf\xfe\xb5\x7f\x76\xff\x37\xe3\x07\x1f\x45\x3e\x6c\xc5\x5e\x9b\x68\xad\xff\xa2\xb6\x20\xfa\x72\x69\x21\x7f\x69\x3c\x2e\x74\x10\xee\x13\x1e\x21\xb2\xae\xd3\x06\x04\x27\x92\x09\xc1\x4b\x7f\x2a\x34\x01\x4a\x34\x2d\x04\x6f\x15\xa9\x5d\x44\xd9\x40\x03\x3b\xf9\x39\xa1\x4a\xa1\x09\xa8\x07\xfd\xc8\xc1\x61\x41\x6a\x7a\xfb\x25\x7e\x8b\xc5\x33\x22\x54\x57\x53\x80\x4b\x1a\xb9\xc5\xa2\xd8\x28\x2d\xe8\xb3\x89\x52\xac\xa3\x12\x51\x1c\x69\x2d\x1f\x0a\xee\xd3\x05\xd4\x0b\x8a\x59\x39\xf3\x88\x12\x48\xd5\xa3\x4e\x04\x81\x66\xe6\x57\xa4\x49\xdc\x7b\x43\xe9\xb6\x9a\xdf\x59\x39\x3b\xf9\xf0\xe9\x7f\x1f\x4c\x3e\xfd\xd5\xb3\x8f\xef\xc7\x46\xc3\x3b\xb0\xa7\xe6\x8d\x9e\xdc\xfb\xfc\xe9\xfe\xef\x63\xa3\x0b\x16\xc4\xe2\x36\x05\xc7\x92\x08\x2b\x67\x9e\x5b\x12\xf8\x7d\x55\xa9\xb8\xdc\x76\xc1\x66\xda\x5c\xb0\x85\x07\x5c\x65\x0d\xb9\x8c\x0e\x87\x69\xeb\x9d\x62\xa0\x2d\xd0\x3d\x0b\xa4\x02\x68\xcc\x7f\x15\x43\xf6\xed\x88\xc8\x75\x17\xb7\xb9\x5e\x7f\x11\xad\xb3\x17\xd1\x34\x73\xb1\xe2\x95\xa0\x7c\xb4\x94\x92\xa7\xe4\x38\x51\xc2\xe9\xb6\x51\x52\x28\xcb\xea\xb3\x13\x0b\x62\xce\x19\x96\x99\x14\x65\x35\x85\x64\x32\x2f\xd9\x31\xd1\xe4\x4b\x36\xff\x4a\x74\x81\x82\x7c\x9a\x8f\xf4\x3e\x85\xf6\xc0\x37\xce\xb4\x85\x77\x2c\x44\xa1\xdd\x41\x5e\x0d\x27\xda\x8c\x7a\xc2\x3c\xd1\xb2\xc9\xe6\xdd\x74\x36\xf2\x43\x12\x85\x9f\xcc\x10\x77\xad\x61\xf1\x9e\xba\x30\x09\xae\x52\x78\x5f\x97\xa1\x58\x01\xc5\x8f\x02\xb2\xe6\xff\x51\x79\x2f\x05\x50\x3e\x33\xcb\xf1\x32\xaf\xf0\x8f\xf5\x0b\x0a\x75\x5b\xf3\x7a\x03\x23\x60\x0c\x53\xe5\x92\xc8\xd8\xcb\xff\x6c\xa9\x7e\x56\xfc\xb2\x26\xeb\x9d\xf4\x22\xbd\xf1\xf2\x5b\xb7\x63\x1a\x1d\xcb\x18\xea\x48\x24\xa9\x45\x8b\x77\xce\xd6\x15\x6d\x10\x72\xcf\xb1\xbc\xce\x6d\x34\x49\x7f\x8e\x05\x7c\xa2\x1e\x8b\x84\x6f\x5a\x0c\xce\x29\xe2\xc7\x8b\x51\xb6\x49\x34\x32\xd9\x96\x7e\x98\xa4\xac\xbc\x28\x2d\x04\xa5\x63\xb4\x52\xb4\x07\xd1\xca\xcf\xfb\x6f\x51\xb1\x19\xb4\xae\x28\xf6\x00\x1a\xc6\x8f\xec\xc1\x2d\xec\x1b\x4c\x5b\x7a\x2d\x60\x42\xe7\xeb\xf0\x0b\x9c\xfa\xc4\x7f\xd3\xe0\x4a\xf8\x91\xe3\x19\xf6\x06\x44\x71\xfc\x12\x65\x9b\x50\x43\x8b\xfc\x7a\x3d\x5e\x50\x2e\x7c\x7f\x02\xbe\x1c\x09\x71\x17\xe4\x87\xdc\xb1\x11\x04\x3d\xfe\x15\xe6\x7c\x76\x1e\xf8\x30\xf0\x17\x22\x81\xb6\xc8\x36\xa4\x6e\x7c\xf3\xc2\x1f\x5a\x0a\x36\x81\x67\x80\x85\xdf\x54\xb1\x21\x3c\xe9\x66\xd0\xb4\x0c\xc0\x38\xd7\xc8\xee\x73\x2e\xde\x79\xe2\x1d\x04\x50\x02\xd4\x52\xb0\x2e\x02\x6c\x59\x68\xcb\xc9\xf8\x0d\x62\x00\xac\x47\x81\x3d\xbd\x18\xb9\xa2\x2c\xbd\x56\xbf\x85\x47\x80\x3a\xf8\x73\x5f\x29\xf5\x80\xe8\x40\x1e\xe8\x70\x0a\xca\xb8\xc6\x0c\x91\xa1\x79\x9f\xe3\xe4\x07\x0e\x4f\x42\x24\x4b\x9e\x14\x3a\x59\x74\x5d\x2c\x2e\xa5\xa4\x2b\xf4\xec\x3c\x10\x8f\xae\xe4\x12\x47\x27\xde\x30\xc5\x04\x08\xbf\xa6\x93\xb2\x93\x59\x4e\x4e\x86\x41\x9b\x15\x9f\x8b\x33\x4a\x59\x1c\xdd\xc2\x45\x15\xf5\x3b\x0e\xbf\xe8\xa1\xf6\x53\x30\x02\x2f\x2b\xf8\xde\x01\x23\x50\x25\xfc\xcc\x11\x56\x7a\x06\x04\x38\xfd\x31\x72\xd6\x18\x4a\x7f\xf1\x09\x56\x01\x49\x67\x22\x53\x4c\xfe\x9f\x21\x32\x7a\xda\xb7\x2c\xf3\x65\x05\x24\xb6\xcc\x2a\xf1\x88\x2d\x33\x39\x6e\x36\x3c\x86\xf3\x4b\xc1\xd1\x2d\x60\xa3\x03\xa5\x67\x38\x1d\xa9\x64\x41\xf2\x7f\x01\x00\x00\xff\xff\x39\x72\x88\x1d\x0b\x48\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
