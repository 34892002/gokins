package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\xe6\xc2\x25\x9f\x9c\x9b\x12\x9f\x93\x99\x97\x8a\x47\x49\x71\x49\x62\x3a\x7e\xf9\xd4\x02\x3c\xd2\xb9\xa9\xc5\xc5\xf8\x0d\xc8\x2f\x4a\xc7\x2f\x1b\x5f\x90\x59\x80\xcf\x00\x90\x34\x01\x4f\xc0\x94\xc4\x97\xa5\x16\x15\x67\xe6\xe7\xe1\x53\x9a\x58\x94\x98\x8b\x47\xbe\xb4\x38\xb5\x88\x80\x34\x01\x2f\x81\x95\xe4\x16\x13\x54\x52\x92\x9f\x9d\x9a\x97\x60\x0d\x08\x00\x00\xff\xff\x1f\xf0\x6a\xe9\xdc\x01\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\x13\x47\x14\x7e\xcf\xaf\x98\xb7\x38\x52\x90\xec\x80\x29\xa8\x4f\x01\xb6\xc8\xaa\x71\x2a\xe3\xb4\xf0\xb4\x1e\xef\x8e\x9d\x29\xde\x99\xd5\xcc\x6c\x9a\xbc\x39\x6a\xb9\x95\x56\x09\x2a\x57\x51\x5a\x52\x55\x45\xad\x68\xc3\x03\x8d\x54\x3b\x12\x3f\x86\xac\x9d\x3c\xf1\x17\xaa\xbd\xd8\x5e\xaf\x2f\x3b\x63\x8c\x2a\x55\xe4\x25\xf6\xee\x39\xc7\x3b\xe7\x7c\xe7\x9b\xef\xcc\x9e\x2f\x6a\xcb\x25\x0d\x94\x96\xcf\xe5\x35\x50\x16\x7a\xc5\xc1\x75\xb3\x0c\x52\x73\x00\x94\xb1\x59\x06\xeb\x90\x19\x6b\x90\xa5\x4e\x9f\x5a\x00\x85\x95\x12\x28\xac\xe6\xf3\x8b\xde\x4d\x1b\xdb\xa8\x8e\x09\xd2\x87\xac\x56\xf3\x79\x70\x41\xfb\x64\x79\x35\x3f\xca\x7c\x1d\x31\x8e\x29\x91\x74\xe3\x02\x0a\x87\xf7\x2d\x33\xe9\xf4\x08\x53\x70\x7e\xe5\xd2\x25\xad\x50\x02\xf3\xed\x9f\xbe\x71\x5b\xcd\xce\xb7\xfb\xed\xc6\xd6\xbc\x1f\x01\x31\x46\x59\x3f\x40\x36\x21\xc0\xf1\xbd\xc7\x47\x7b\x7b\x87\xaf\x77\xdb\x5b\x7b\x61\x80\x75\x44\x84\xfc\x13\x1c\x36\xef\x1c\xb6\xf6\x03\x57\x81\x2d\xa4\x73\x01\x2d\xbb\x0c\x4c\x28\x90\xf7\x3d\x95\xb0\x80\xdb\xcf\x8f\x76\xbf\x6b\x3f\xdc\x3f\xbe\xff\xba\x1b\x44\xd4\x51\xff\xf7\x97\xb2\xd9\xc9\x01\x9e\xdd\x3c\xfe\xe5\x51\xe0\x6a\x21\xce\x61\x4d\xc5\xd9\x4f\x5f\x74\xf5\x5c\x40\x26\x90\x29\xfd\xfc\xee\x41\xc3\x7d\x7e\xc7\x7b\xfe\x87\xaf\x82\x08\x55\x4c\x30\x5f\x53\x08\xd1\x69\xfd\xd0\x7e\xfa\x73\x34\x84\xc1\x10\x54\x7a\x88\x5b\x4f\xdc\x56\x33\x1a\xc1\xb1\x4d\xa5\x08\xed\x27\xaf\xda\x0f\x5e\x46\x23\x84\xb8\x95\xcf\x65\xe7\xf6\xad\xf6\x8f\x2f\x7c\xe7\xcf\x8a\xb9\x4b\xcb\xc5\xab\xe0\x53\xed\x2a\x48\x79\x6d\xb5\x00\x56\x2f\xe7\x0a\x17\xc1\xb9\x52\x51\xd3\xe6\x16\x3e\x9e\x8b\xb7\xa1\x61\x99\xba\xd7\x2e\x32\x9d\x58\x63\xd4\xb1\x25\xfb\xc9\x6f\x6f\xe9\xde\x43\xb2\x61\xe3\x6d\x9a\x1d\x95\x5d\xdf\x92\x38\x56\x19\x60\x22\x52\x99\xcc\x38\x13\x83\x12\xe1\xb7\x9c\x40\x1b\x22\x72\x59\x0a\x04\x0a\xa0\x55\x41\xe7\x74\x55\xe4\xc2\xef\x3e\x05\x32\x95\x66\xc7\x08\x54\xff\xde\x6a\xbf\x7c\xd5\x69\xbe\xc6\xe6\xfc\x14\x35\x7e\x67\x7e\xdd\xc0\x42\x37\xa8\x89\xca\xa0\x82\x6b\x5e\x65\x97\x12\x18\xb6\xd1\x70\x6f\x36\x3b\xcf\x66\xc5\xcf\x04\x5a\x0a\x0c\xe7\xee\x7c\xef\xfe\xf9\x30\xf0\x34\x31\xb7\xeb\x70\x53\x97\x89\xf0\x81\x0c\x67\x45\x86\x65\x4a\x74\xee\x18\x06\xe2\x51\xc2\x18\x97\x72\x4a\xf4\x2a\xc4\x75\x87\x21\x09\x63\x4e\x99\xe8\xc1\x30\x33\x89\x1e\x92\x37\xc5\x69\x3b\x1e\xd9\x32\x0d\xaf\xd8\xa3\xb5\x41\x99\x95\xd8\xa5\x71\x4a\x50\x46\xfa\x4c\x09\x29\x48\x8a\x5c\x7f\xfd\xbf\xd8\x28\x69\x01\x51\x36\xfa\x40\x2e\xb3\x20\x17\xc4\x18\xae\x11\x2a\x45\x17\xc4\xb1\x2a\x88\x4d\x46\x4a\xa8\x48\x2c\x0b\x12\x93\xc7\x25\x89\x89\x6c\x44\x4c\xae\x7b\x0f\xfb\x25\xa7\xa4\x7f\x07\x5b\x92\x14\x53\x46\x64\x1d\x33\x4a\x2c\x44\x04\x8f\x47\x91\xe3\x33\x75\x96\xea\xcd\x05\xc9\x44\x05\xbd\xbb\xe7\x72\x17\x73\x85\x52\xef\x06\x58\x5e\x2d\xad\xe8\xb9\xc2\xf9\xa2\xe6\x15\x20\x28\xbb\x02\x41\xb8\xdb\x77\x8f\x1b\x5b\x47\x8d\xeb\x6f\x0f\x6e\xb9\xdb\x7b\x9d\xdf\x9b\x6f\x0f\x6e\x2b\x0c\x3b\x83\x2a\xb1\x4e\x49\x6d\xb0\x2c\x62\xd3\x46\x52\x62\x54\x41\x52\x62\x52\xa5\x43\xf5\x77\x58\x3d\x89\x2b\x46\x16\x68\x31\xc8\x6b\x62\x9d\x28\xab\xcd\xb2\x46\x32\xdc\x34\xb2\x0a\xe3\x2d\x4d\xc4\x8d\x32\x28\x69\x57\x4a\xe3\x36\x12\xa7\x52\xc7\x46\x19\xe4\x0a\xa5\x54\x5c\xf1\xa7\x23\x90\xb8\xfe\xc2\x3d\x68\xa8\x70\x50\xf8\xf3\x75\xe4\x9b\xfa\x0d\x12\x0f\x1f\x35\xd1\xbd\x40\xd3\x88\x7c\x85\x5a\xe9\xde\xae\x19\x16\xcc\xaf\x49\x94\x58\x26\xd4\xc5\x73\x95\x3f\x45\x51\xda\x8a\xef\xed\x1f\xb6\xf6\x0f\x9b\x4d\xe5\xcc\xaa\xd7\x6d\x30\x73\x43\x39\xf3\x4c\x72\x85\x0b\xda\x95\xde\x7a\x53\xdd\x0f\x89\xb9\xed\xaa\x11\x99\x66\x90\x96\x38\x0c\xd9\x54\x32\xed\xd3\xcb\x27\x8f\x8a\xa4\x3c\x3c\xe2\xd7\xc7\x73\x9a\x3a\xc7\xc7\x15\x9c\x54\xee\x24\x36\xc4\xb8\xfa\x6a\xbf\xd8\x6d\xdf\x7f\x19\xb2\x37\xc3\xb5\x1a\x62\xf2\xfa\xe7\xe8\xf9\x6f\xee\xf6\xdd\xf6\x83\x7f\xdc\x83\xed\xc8\x69\x9b\x82\x04\x0c\x8e\xdb\x6c\x87\xaf\xbd\x69\x6c\xd9\xec\x4d\x63\x8b\x50\x81\xe6\xc3\x0a\x57\xa5\x72\x5f\x61\x90\x18\x6b\xb3\x06\x8d\x6f\x2a\x8d\x18\x4f\x62\x60\xa1\xf3\x35\xa8\x62\xde\xdb\xc8\x7b\x60\x89\x94\x67\x7b\xe7\xb0\xf9\x6b\x54\x9b\xf6\x20\xa1\x8e\xe3\xe9\x3b\x40\x2e\x59\x92\x9a\xcf\xb7\xdd\xb4\xea\x13\x3a\x45\x85\xe4\x02\x53\xdd\xe1\x51\xcc\x4e\xca\x7a\xdf\x5e\x96\x39\xba\x1b\x94\xc0\x64\x73\xfc\x26\x25\x20\xab\x21\xa1\xab\x41\x26\xea\x24\x8b\x9b\xa8\x8f\x6c\x7b\x44\x7d\x8c\x3a\x25\x48\x1f\xd0\x3d\xef\x77\x9e\x7b\xe7\x79\x8c\x0a\xc9\x6c\x8e\x50\x9e\xc3\xa8\x66\xfa\x08\x8e\x1c\xdd\xfa\x4a\xa9\x9a\x82\xdf\x21\x83\xd6\x14\x62\x63\x6a\x11\x38\x3e\x75\x26\x14\x30\x2e\x8d\xbd\xc6\xe3\xca\x7a\x4b\x4a\x69\x05\xed\xfa\x1f\xc8\x62\x1b\x46\x8f\xac\x26\x24\x84\x60\xe3\x9a\x54\x44\xb8\x0e\x05\x4c\xc4\xb7\x2a\xad\xd5\x69\x0d\x93\x99\x0b\xde\x13\x27\xc0\x89\x09\x7f\xde\xfd\x22\x32\x28\x33\x39\xa0\x55\x10\x94\x29\xd1\x29\x57\xb8\xac\x15\x4b\x9e\xca\x5c\xf1\x51\x13\x14\x77\xee\xf3\xe5\xfc\xaa\x76\x79\x0e\xf8\x55\x06\x20\xb3\xe8\xff\x9b\x87\xa6\x85\xc9\x7c\xf8\x05\x65\xd2\xd0\x34\x4e\x9e\x3d\x75\xb6\x02\xb3\x67\x61\xa5\x82\xb2\xa7\x51\x3a\xfb\x51\x75\x29\x5d\x3d\x73\xe6\x24\xea\xda\x75\xfe\xda\xed\xec\xdc\x70\xef\x3e\x0a\x2f\x74\x17\x0e\x40\x61\xe5\x8b\xd4\x42\xff\xe2\x1c\x00\x63\xd0\xd6\x1f\xc4\xd4\x9a\x4d\x6a\x2e\x0e\x0d\xa5\x87\x00\x25\x2c\x78\xa8\x45\xcc\xd2\xa1\x69\x25\x6a\xf9\x78\xa2\x02\x4f\xf6\x55\xa2\x63\xc6\xdd\xfe\xe3\x68\xaf\xb5\xb8\x74\xb4\xd7\x72\x6f\x3c\x1e\x70\x47\x1b\x28\x79\x8a\x08\x5f\x7a\x3e\xfd\xfa\xf8\xf1\x4e\xe8\x2d\x31\x4d\xf4\xe6\x09\xc7\x1f\x26\x9c\x89\x36\x74\xec\xc0\x31\x18\x8a\xf6\x62\x2d\x82\xd1\xf3\xc9\x78\x94\x58\x3c\x86\x92\x64\xf2\x51\x3c\x39\x19\x9c\xe7\x00\x28\x5b\xfc\x3d\xa1\x86\x21\x68\x0a\x4b\xce\xb6\xbb\xcd\x8f\x7c\xad\x97\x0e\x8d\x92\x47\x75\xf5\x61\x7d\x26\x30\x99\x50\x50\x41\xaf\x21\xf2\x2e\x8d\x9f\x74\xb2\x18\x1e\x56\x49\x9c\x55\x79\x0c\x61\x23\x92\xfc\x16\x20\x34\x96\x55\x91\x43\xbb\xd5\x44\x53\xf9\xfd\xca\x33\xf6\xdf\xf1\x74\x93\xd8\x9f\x50\x46\xa2\xad\xca\x10\x5f\x93\xb2\x45\x1b\x36\x66\x88\xeb\x98\x8c\xcf\x6f\x3a\x66\x2b\x8d\xa7\xfe\x93\x48\x7b\x28\xb5\x95\xbf\xc0\xf8\x39\xa2\x8f\x96\x11\xe7\x8b\xef\x81\x05\x03\x08\xa5\xba\x1f\x86\x1b\xe1\xdf\x00\x00\x00\xff\xff\x54\x41\x7d\x3c\x10\x24\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
