package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\xe6\xc2\x25\x9f\x9c\x9b\x12\x9f\x93\x99\x97\x8a\x47\x49\x71\x49\x62\x3a\x7e\xf9\xd4\x02\x3c\xd2\xb9\xa9\xc5\xc5\xf8\x0d\xc8\x2f\x4a\xc7\x2f\x1b\x5f\x90\x59\x80\xcf\x00\x90\x34\x01\x4f\xc0\x94\xc4\x97\xa5\x16\x15\x67\xe6\xe7\xe1\x53\x9a\x58\x94\x98\x8b\x47\xbe\xb4\x38\xb5\x88\x80\x34\x01\x2f\x81\x95\xe4\x16\x13\x54\x52\x92\x9f\x9d\x9a\x97\x60\x0d\x08\x00\x00\xff\xff\x1f\xf0\x6a\xe9\xdc\x01\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\x13\x47\x14\x7e\xcf\xaf\x98\xb7\x38\x52\x90\xec\x80\x29\xa8\x4f\x01\xb6\xc8\xaa\x71\x2a\xe3\xb4\xf0\xb4\x1e\xef\x8e\x9d\x29\xde\x99\xd5\xcc\x6c\x9a\xbc\x39\x6a\xb9\x95\x56\x09\x2a\x57\x51\x5a\x52\x55\x45\xad\x68\xc3\x03\x8d\x54\x3b\x12\x3f\x86\xac\x9d\x3c\xf1\x17\xaa\xbd\xd8\x5e\xaf\x2f\x3b\x63\x8c\x2a\x55\xe4\x25\xf6\xee\x39\xc7\x3b\xe7\x7c\xe7\x9b\xef\xcc\x9e\x2f\x6a\xcb\x25\x0d\x94\x96\xcf\xe5\x35\x50\x16\x7a\xc5\xc1\x75\xb3\x0c\x52\x73\x00\x94\xb1\x59\x06\xeb\x90\x19\x6b\x90\xa5\x4e\x9f\x5a\x00\x85\x95\x12\x28\xac\xe6\xf3\x8b\xde\x4d\x1b\xdb\xa8\x8e\x09\xd2\x87\xac\x56\xf3\x79\x70\x41\xfb\x64\x79\x35\x3f\xca\x7c\x1d\x31\x8e\x29\x91\x74\xe3\x02\x0a\x87\xf7\x2d\x33\xe9\xf4\x08\x53\x70\x7e\xe5\xd2\x25\xad\x50\x02\xf3\xed\x9f\xbe\x71\x5b\xcd\xce\xb7\xfb\xed\xc6\xd6\xbc\x1f\x01\x31\x46\x59\x3f\x40\x36\x21\xc0\xf1\xbd\xc7\x47\x7b\x7b\x87\xaf\x77\xdb\x5b\x7b\x61\x80\x75\x44\x84\xfc\x13\x1c\x36\xef\x1c\xb6\xf6\x03\x57\x81\x2d\xa4\x73\x01\x2d\xbb\x0c\x4c\x28\x90\xf7\x3d\x95\xb0\x80\xdb\xcf\x8f\x76\xbf\x6b\x3f\xdc\x3f\xbe\xff\xba\x1b\x44\xd4\x51\xff\xf7\x97\xb2\xd9\xc9\x01\x9e\xdd\x3c\xfe\xe5\x51\xe0\x6a\x21\xce\x61\x4d\xc5\xd9\x4f\x5f\x74\xf5\x5c\x40\x26\x90\x29\xfd\xfc\xee\x41\xc3\x7d\x7e\xc7\x7b\xfe\x87\xaf\x82\x08\x55\x4c\x30\x5f\x53\x08\xd1\x69\xfd\xd0\x7e\xfa\x73\x34\x84\xc1\x10\x54\x7a\x88\x5b\x4f\xdc\x56\x33\x1a\xc1\xb1\x4d\xa5\x08\xed\x27\xaf\xda\x0f\x5e\x46\x23\x84\xb8\x95\xcf\x65\xe7\xf6\xad\xf6\x8f\x2f\x7c\xe7\xcf\x8a\xb9\x4b\xcb\xc5\xab\xe0\x53\xed\x2a\x48\x79\x6d\xb5\x00\x56\x2f\xe7\x0a\x17\xc1\xb9\x52\x51\xd3\xe6\x16\x3e\x9e\x8b\xb7\xa1\x61\x99\xba\xd7\x2e\x32\x9d\x58\x63\xd4\xb1\x25\xfb\xc9\x6f\x6f\xe9\xde\x43\xb2\x61\xe3\x6d\x9a\x1d\x95\x5d\xdf\x92\x38\x56\x19\x60\x22\x52\x99\xcc\x38\x13\x83\x12\xe1\xb7\x9c\x40\x1b\x22\x72\x59\x0a\x04\x0a\xa0\x55\x41\xe7\x74\x55\xe4\xc2\xef\x3e\x05\x32\x95\x66\xc7\x08\x54\xff\xde\x6a\xbf\x7c\xd5\x69\xbe\xc6\xe6\xfc\x14\x35\x7e\x67\x7e\xdd\xc0\x42\x37\xa8\x89\xca\xa0\x82\x6b\x5e\x65\x97\x12\x18\xb6\xd1\x70\x6f\x36\x3b\xcf\x66\xc5\xcf\x04\x5a\x0a\x0c\xe7\xee\x7c\xef\xfe\xf9\x30\xf0\x34\x31\xb7\xeb\x70\x53\x97\x89\xf0\x81\x0c\x67\x45\x86\x65\x4a\x74\xee\x18\x06\xe2\x51\xc2\x18\x97\x72\x4a\xf4\x2a\xc4\x75\x87\x21\x09\x63\x4e\x99\xe8\xc1\x30\x33\x89\x1e\x92\x37\xc5\x69\x3b\x1e\xd9\x32\x0d\xaf\xd8\xa3\xb5\x41\x99\x95\xd8\xa5\x71\x4a\x50\x46\xfa\x4c\x09\x29\x48\x8a\x5c\x7f\xfd\xbf\xd8\x28\x69\x01\x51\x36\xfa\x40\x2e\xb3\x20\x17\xc4\x18\xae\x11\x2a\x45\x17\xc4\xb1\x2a\x88\x4d\x46\x4a\xa8\x48\x2c\x0b\x12\x93\xc7\x25\x89\x89\x6c\x44\x4c\xae\x7b\x0f\xfb\x25\xa7\xa4\x7f\x07\x5b\x92\x14\x53\x46\x64\x1d\x33\x4a\x2c\x44\x04\x8f\x47\x91\xe3\x33\x75\x96\xea\xcd\x05\xc9\x44\x05\xbd\xbb\xe7\x72\x17\x73\x85\x52\xef\x06\x58\x5e\x2d\xad\xe8\xb9\xc2\xf9\xa2\xe6\x15\x20\x28\xbb\x02\x41\xb8\xdb\x77\x8f\x1b\x5b\x47\x8d\xeb\x6f\x0f\x6e\xb9\xdb\x7b\x9d\xdf\x9b\x6f\x0f\x6e\x2b\x0c\x3b\x83\x2a\xb1\x4e\x49\x6d\xb0\x2c\x62\xd3\x46\x52\x62\x54\x41\x52\x62\x52\xa5\x43\xf5\x77\x58\x3d\x89\x2b\x86\x0b\xe4\x65\x74\x11\x48\xd5\x89\xb2\xda\x2c\x6b\x24\xc3\x4d\x23\xab\x30\xde\xd2\x44\xdc\x28\x83\x92\x76\xa5\x34\x6e\x23\x71\x2a\x75\x6c\x94\x41\xae\x50\x4a\xc5\x15\x7f\x3a\x02\x89\xeb\x2f\xdc\x83\x86\x0a\x07\x85\x3f\x5f\x47\xbe\xa9\xdf\x20\xf1\xf0\x51\x13\xdd\x0b\xa4\x2c\xf2\xd5\x6a\xa5\x7b\xbb\x66\x58\x30\xbf\x26\x51\x62\x99\x50\x17\xcf\x55\xfe\x14\x45\x69\x2b\xbe\xb7\x7f\xd8\xda\x3f\x6c\x36\x95\x33\xab\x5e\xb7\xe1\xcc\x0d\xe4\xcc\x33\xc9\x15\x2e\x68\x57\x7a\xeb\x4d\x75\x3f\x24\xe6\xb6\xab\x46\x64\x9a\x41\x5a\xe2\x30\x64\x53\xc9\xb4\x4f\x2f\x9f\x3c\x2a\x92\xf2\xf0\x88\x5f\x1f\xcf\x69\xea\x1c\x1f\x57\x70\x52\xb9\x93\xd8\x10\xe3\xea\xab\xfd\x62\xb7\x7d\xff\x65\xc8\xde\x0c\xd7\x6a\x88\xc9\xeb\x9f\xa3\xe7\xbf\xb9\xdb\x77\xdb\x0f\xfe\x71\x0f\xb6\x23\xa7\x6d\x0a\x12\x30\x38\x6e\xb3\x1d\xbe\xf6\xa6\xb1\x65\xb3\x37\x8d\x2d\x42\x05\x9a\x0f\x2b\x5c\x95\xca\x7d\x85\x41\x62\xac\xcd\x1a\x34\xbe\xa9\x34\x62\x3c\x89\x81\x85\xce\xd7\xa0\x8a\x79\x6f\x23\xef\x81\x25\x52\x9e\xed\x9d\xc3\xe6\xaf\x51\x6d\xda\x83\x84\x3a\x8e\xa7\xef\x00\xb9\x64\x49\x6a\x3e\xdf\x76\xd3\xaa\x4f\xe8\x14\x15\x92\x0b\x4c\x75\x87\x47\x31\x3b\x29\xeb\x7d\x7b\x59\xe6\xe8\x6e\x50\x02\x93\xcd\xf1\x9b\x94\x80\xac\x86\x84\xae\x06\x99\xa8\x93\x2c\x6e\xa2\x3e\xb2\xed\x11\xf5\x31\xea\x94\x20\x7d\x40\xf7\xbc\xdf\x79\xee\x9d\xe7\x31\x2a\x24\xb3\x39\x42\x79\x0e\xa3\x9a\xe9\x23\x38\x72\x74\xeb\x2b\xa5\x6a\x0a\x7e\x87\x0c\x5a\x53\x88\x8d\xa9\x45\xe0\xf8\xd4\x99\x50\xc0\xb8\x34\xf6\x1a\x8f\x4f\xa5\xb7\x12\x57\x1e\xb4\xeb\x7f\x20\x8b\x6d\x18\x3d\xb2\x9a\x90\x10\x82\x8d\x6b\x52\x11\xe1\x3a\x14\x30\x11\xdf\xaa\xb4\x56\xa7\x35\x4c\x66\x2e\x78\x4f\x9c\x00\x27\x26\xfc\x79\xf7\x8b\xc8\xa0\xcc\xe4\x80\x56\x41\x50\xa6\x44\xa7\x5c\xe1\xb2\x56\x2c\x79\x2a\x73\xc5\x47\x4d\x50\xdc\xb9\xcf\x97\xf3\xab\xda\xe5\x39\xe0\x57\x19\x80\xcc\xa2\xff\x6f\x1e\x9a\x16\x26\xf3\xe1\x17\x94\x49\x43\xd3\x38\x79\xf6\xd4\xd9\x0a\xcc\x9e\x85\x95\x0a\xca\x9e\x46\xe9\xec\x47\xd5\xa5\x74\xf5\xcc\x99\x93\xa8\x6b\xd7\xf9\x6b\xb7\xb3\x73\xc3\xbd\xfb\x28\xbc\xd0\x5d\x38\x00\x85\x95\x2f\x52\x0b\xfd\x8b\x73\x00\x8c\x41\x5b\x7f\x10\x53\x6b\x36\xa9\xb9\x38\x34\x94\x1e\x02\x94\xb0\xe0\xa1\x16\x31\x4b\x87\xa6\x95\xa8\xe5\xe3\x89\x0a\x3c\xd9\x57\x89\x8e\x19\x77\xfb\x8f\xa3\xbd\xd6\xe2\xd2\xd1\x5e\xcb\xbd\xf1\x78\xc0\x1d\x6d\xa0\xe4\x29\x22\x7c\xe9\xf9\xf4\xeb\xe3\xc7\x3b\xa1\xb7\xc4\x34\xd1\x9b\x27\x1c\x7f\x98\x70\x26\xda\xd0\xb1\x03\xc7\x60\x28\xda\x8b\xb5\x08\x46\xcf\x27\xe3\x51\x62\xf1\x18\x4a\x92\xc9\x47\xf1\xe4\x64\x70\x9e\x03\xa0\x6c\xf1\xf7\x84\x1a\x86\xa0\x29\x2c\x39\xdb\xee\x36\x3f\xf2\xb5\x5e\x3a\x34\x4a\x1e\xd5\xd5\x87\xf5\x99\xc0\x64\x42\x41\x05\xbd\x86\xc8\xbb\x34\x7e\xd2\xc9\x62\x78\x58\x25\x71\x56\xe5\x31\x84\x8d\x48\xf2\x5b\x80\xd0\x58\x56\x45\x0e\xed\x56\x13\x4d\xe5\xf7\x2b\xcf\xd8\x7f\xc7\xd3\x4d\x62\x7f\x42\x19\x89\xb6\x2a\x43\x7c\x4d\xca\x16\x6d\xd8\x98\x21\xae\x63\x32\x3e\xbf\xe9\x98\xad\x34\x9e\xfa\x4f\x22\xed\xa1\xd4\x56\xfe\x02\xe3\xe7\x88\x3e\x5a\x46\x9c\x2f\xbe\x07\x16\x0c\x20\x94\xea\x7e\x18\x6e\x84\x7f\x03\x00\x00\xff\xff\x5d\xa2\x44\x15\x10\x24\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
