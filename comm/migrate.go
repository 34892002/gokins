package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcd\x4a\x04\x31\x0c\xc0\xf1\xbb\x4f\xd1\xf7\xd8\x93\xe2\x0a\x0b\x82\xe2\xee\xc1\x5b\x26\x76\x33\x25\x4c\xbf\x48\xd3\x81\x79\x7b\x19\x41\xf6\x96\xce\xf9\xff\xa3\x24\xe9\xeb\xd7\xc7\xa7\xbb\x3d\xbf\xbc\x9f\xdd\xe5\xcd\x9d\xbf\x2f\xd7\xdb\xd5\x4d\x0a\x28\xca\x33\x7a\x85\x8a\x7e\xc1\x40\xd3\xe9\x69\x48\x57\x92\xc6\x25\x1f\xa0\x45\x36\x43\xfd\x74\x8e\x77\xa3\xfb\x74\x87\xc8\xd9\x9a\xa9\xa9\x3d\x73\x53\xaa\x46\x56\xe1\x10\x48\xc6\x02\xa4\x5b\xfb\x26\x6a\xcd\x1e\xa4\x48\xb0\x2b\x54\xae\xd6\x03\x7b\x1e\x1c\xe3\x9f\x80\x2f\x79\x3e\xe2\x56\xb4\x56\x7f\xb0\xe1\x7f\x57\x14\x4c\x46\xef\xcd\x3c\xf2\x9e\x81\xf3\x5c\x46\xc6\xbe\xe2\x1f\x49\x6d\x48\xb4\x2c\x64\x6d\xb3\xa5\x08\x35\xf6\xc0\x23\xa4\x94\x6a\x44\xa5\xe9\xf4\x1b\x00\x00\xff\xff\x07\x37\xa2\xca\x5f\x03\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6e\x1b\xc7\x15\xbe\xd7\x53\x0c\x72\x43\x0a\x90\x02\x4a\xb6\x52\xdb\x45\x80\xca\x36\xeb\xb2\x95\xa9\x42\xa6\xda\x04\x30\xb0\x1c\xee\x8e\x96\x13\xed\xce\x2e\x66\x87\x94\x05\xf4\x42\x42\x9b\xd6\xae\x5b\xd8\x6e\xd2\x38\x46\x9a\xb6\x42\x80\xb8\x05\x9c\xca\x17\xae\x60\x48\x72\xf3\x30\x11\x29\xf9\x2a\xaf\x50\xcc\xfe\x88\xcb\xfd\x9b\x59\x72\x29\xdb\x88\x79\x43\x69\xe7\xcc\xec\xec\x39\xdf\xf9\xe6\x7c\x67\x79\x65\xa5\xba\xd8\xa8\x82\xc6\xe2\xe5\xa5\x2a\x68\x32\x05\x52\x86\xd7\xa0\xca\x14\x1b\xaa\xeb\x50\x47\x4d\x50\x9e\x02\xa0\x89\xb5\x26\xe8\x42\xaa\xb6\x21\x2d\xbf\x77\x7e\x1a\xd4\x97\x1b\xa0\xbe\xba\xb4\x34\xc3\x07\x21\x1f\x6d\x61\x1d\x13\x56\x9e\xaf\x0c\x06\xc1\xe2\x6a\x63\x59\xa9\xd5\xaf\xac\x54\xaf\x57\xeb\x0d\xd7\x96\x22\xdb\x52\xa2\xab\x5d\xad\xfe\x74\x71\x75\x29\xb4\x22\x81\x26\x1a\x98\xcc\x55\x2a\x09\x36\x1a\x76\x6c\x03\x6e\x2a\xc3\xb6\xf3\x0b\x0b\x49\xb6\xc8\x51\x07\x36\x0b\x89\xeb\xa9\x14\x41\x86\xb4\x26\xd0\x20\x43\x0c\x9b\x28\x6e\xd2\xb1\x35\x91\x89\x86\x0c\xe4\x9a\x70\x67\xcc\x25\x6e\xc5\x35\x50\xf8\xf4\x8c\x85\x7e\xb9\x52\xbb\xbe\xb8\xf2\x21\xf8\x45\xf5\x43\x50\x76\x3d\x3c\xe3\x46\x61\x9a\x0f\xf2\x8b\x4d\x9b\x7b\xb1\x7c\xea\xd0\xc1\x00\xb5\x89\x19\x1e\x99\xf1\xfd\x39\x3d\x35\x0d\xaa\xf5\x6b\xb5\x7a\x15\xbc\x0f\x6a\x84\x58\x57\x2f\x9f\xde\xf6\xca\xcf\x16\x57\x6e\x54\x1b\xe0\x7d\xd0\x61\x6b\x17\xcc\xd6\xf9\x1f\x4f\xa5\x22\xa3\x8b\xa8\x83\x2d\xf2\x6a\x90\xe1\xc3\xb2\x18\x08\x9d\x3e\x49\xb6\x99\xd3\x86\x42\x30\x4a\x00\xcc\xa6\xa8\x8b\xd1\x46\x3a\x34\xde\x34\x04\x4e\x18\x68\x16\xdd\x2c\x1a\x63\x1d\x21\x6c\x2c\xaa\x8b\xb1\x85\x35\x44\x18\x5e\xc3\x88\x86\x63\x2e\x04\xe1\x7c\x1a\x8f\xc1\x96\x91\x10\xb0\x52\xa5\x04\xae\x2c\x5f\xe7\x9b\x07\xa5\xfe\xe7\xbb\xbd\xfb\x5f\xf7\x5e\xfc\xa5\xbf\xf3\x55\x79\xce\xfb\xfe\x4d\xa5\xff\xcd\x57\xbd\xe7\xcf\xa7\x4b\x1e\x4c\xad\x0e\x55\x91\x60\x47\x32\x40\x35\x2c\xdd\x12\x31\xea\x1b\x82\x55\xb0\x7a\xa3\x56\xbf\x06\x2e\x37\x56\xaa\xd5\xf1\x50\xd9\xea\x60\x43\x93\xc1\xa3\x8d\x6d\x64\x60\x12\xa7\x28\x17\x94\x71\x56\x08\xcc\x7d\x32\x92\x9c\xe6\x30\xc8\x3a\x4e\x84\x96\x62\xa6\x21\xfc\xfc\xfd\x77\xbd\x83\xfd\xe3\x3f\xee\xf5\xb7\xb6\x3d\xb8\x20\x4a\x2d\x1a\x81\x42\xc6\x02\x2f\x3f\x7d\x74\xb2\xbb\x7b\xf4\xed\x4e\x7f\x7b\xd7\x5f\xa0\x8b\x08\x93\xdf\xc1\xd1\xfe\xdd\xa3\x83\xbd\x52\xb0\x7b\x3a\x04\x8d\x72\xf6\xdc\xde\xe1\x56\xef\xf1\xdd\xfe\xc3\xbd\x97\x0f\x9f\x79\x2b\xac\x61\x82\x9d\x76\x8e\x25\x8e\x0f\x3e\xe9\x7f\xf9\x8f\xf0\x12\x31\x08\x8b\x36\x71\xfb\x8b\xde\xc1\x7e\x78\x85\x18\xc2\x05\x2b\xf4\xbf\x78\xd6\xff\xec\x69\x78\x85\xd8\x09\xe4\x66\x5b\xd6\x63\xdc\xb9\xdd\xff\xdb\x93\x52\x1c\xf4\xc5\xa2\x5d\x35\x35\x85\xa3\x52\x06\xf0\x3a\xb5\x3a\xb6\x24\x6c\xdd\x2c\x92\x86\x38\x92\x5d\x36\x9a\x0d\x0b\x49\x71\xf0\x18\xb9\x63\xfa\x6c\x33\x97\x66\xa2\x5a\x1a\x12\xdb\x10\xe6\xa2\x9f\xa1\x5b\x2c\x83\x15\x13\x01\x91\x23\x05\xf2\x60\x7d\xd2\x98\x70\x98\xa4\x1e\xc8\x4f\x69\xa1\x14\xf9\xef\x76\xff\xe9\xb3\xe3\xfd\x6f\xb1\x56\x1a\x01\x31\xaf\x9c\x14\x13\xd4\x48\x16\xa5\xdc\xff\x73\xef\x9b\x87\x25\x91\x9e\x19\x07\x41\x3f\x00\x12\x75\x2c\xca\x44\x09\xeb\x83\x57\xec\xd6\xc9\x66\x10\xb2\x65\x12\x28\x27\xe6\x23\x72\x48\x88\xfa\x68\x8a\xe5\x46\x5e\xa1\x09\xee\x39\x45\x0e\xef\xe3\x66\xf7\xe8\x15\x0b\xba\x85\x99\x22\x38\x19\x42\xbc\xb0\xb5\xd5\xfb\xc3\xfe\xf1\x3f\x27\xc3\x2a\xa2\x7d\x87\x59\xe5\x2d\x49\x14\x50\x69\xf1\x00\x62\x9d\x58\x54\xa2\x2e\x30\x4d\x48\x34\x27\x5a\x18\x6c\x40\xcc\x9c\x26\xf8\xc8\xb1\x48\x08\xd0\x62\xde\x9a\x24\x1b\x31\x8a\x75\x9d\x4b\xd8\xb3\xd6\xd8\xe9\x0a\x29\x7c\x4f\xb6\x69\x23\x27\x97\xbe\x96\x69\xcd\x24\xab\x59\x1b\x52\x68\x06\xf1\x89\x8d\x22\x92\x2c\xd0\x8b\x15\xc3\xe2\x7e\x4b\xc7\xeb\xf8\xf1\xaf\x31\x5b\x2c\x7e\xe8\x15\xda\x29\xbc\x8d\xc7\xb2\xc2\x3f\xc8\xae\x93\xc7\x5f\xf7\xee\x3d\xe8\x3d\xfa\x57\xed\x6a\xe9\x14\x14\xa9\xe7\x49\xbc\x03\x43\xd6\xac\xf4\x78\x0d\xd3\xed\xa8\x0d\x0c\x71\x40\x98\x17\x10\x36\x7e\x40\x4c\xe4\x38\x79\xba\xed\x97\x6b\xd7\x6a\xf5\x46\xbe\x3c\xcc\x22\xdc\x7b\x0f\x5e\x6e\x6d\x9f\x6c\x7d\xfc\xfd\xe1\xed\xde\xbd\xdd\xe3\x7f\xef\x7f\x7f\x78\xa7\xe4\xc7\x93\x19\x72\x55\xc1\xa9\x26\x32\x2c\xa2\x0f\xd3\x5f\x42\x2e\xa7\xac\x21\x2f\xa0\x7c\x08\x0c\xdf\xa8\x43\x0d\xd1\x39\x7b\x46\xfd\x22\x8b\xea\x67\x1b\xcd\xb4\x86\x63\xb2\xa1\xc7\x8a\x8d\xea\x07\x8d\xb4\x1a\xaf\xd3\x32\xb0\xda\x04\xb5\x7a\xa3\x1c\x3d\x9d\x2a\x21\xe4\x7c\xfc\xa4\x77\xb8\xf5\xfa\x1c\xf3\xd1\x8e\xe2\xf0\xbe\x33\x7a\x8a\x92\x92\x3a\x05\x2b\xdc\xb0\x56\xbf\x5a\xfd\xc0\x8b\x94\x4f\xd2\x85\xa2\x49\xe1\x0c\xe9\x43\x2a\x0f\x21\x27\x75\xb4\xd3\xcb\xfa\x5c\xa5\xfc\xa7\x7b\x47\x07\x7b\x47\xfb\xfb\x79\xc2\x3f\x22\xb8\xe2\x51\x48\xf3\xbf\xff\xbc\xe5\xe0\x8f\x02\xa3\x10\x14\x2e\x32\x89\x2d\x2e\x83\xa4\x5e\x5c\xe6\x78\xc9\x79\x5a\x56\x71\xb6\x2d\xa0\x7f\x9f\xd6\x9c\x2f\x55\x4a\xa3\xf7\xe6\x27\x13\x10\x45\xb5\xc8\x5a\x38\x37\x64\x12\x43\xae\x0c\x1d\x3a\x51\x92\x7d\x09\x55\x15\x39\x8e\xc2\xac\x75\x14\xd5\x17\x31\xdb\x4d\xd3\x50\x62\x07\xa5\x77\x23\x07\x51\x89\x30\x0b\x12\xa1\x20\x7f\xe6\x78\xc7\x2b\x01\xf4\x8e\xd9\xe2\x3a\x23\x44\x58\x59\x8a\xbd\xff\x64\xa7\xff\xd7\xa7\x21\xc5\x1e\xd5\xfc\x59\x6a\xdd\xee\x38\xed\xef\xb6\xb6\x6d\xfa\xdd\xd6\x36\xb1\x18\xf2\x55\x70\xf8\x0d\xae\x20\x7b\x72\xa5\xda\x48\xf9\x29\x74\x58\xb2\x56\x15\x17\x5c\xb9\x33\x9b\x61\xb2\x99\x92\xdd\x36\x55\x04\x71\x73\xcd\xdc\x77\xbf\xaa\x61\x11\xa4\x88\x33\x65\xa2\x54\xc0\x25\xdc\x08\xc7\xa3\x4c\x6b\x25\x67\x21\xac\x41\x06\xa3\x85\x29\x0f\x84\x33\x52\xb5\x51\xa0\x8f\x38\xc5\x14\x59\x94\x4a\xfb\xce\x86\x8e\x23\xe5\x3a\x82\xd5\x75\xa9\x15\x61\x17\x32\x28\xec\xa9\xe5\xad\x4b\x0c\x4b\xc7\x44\xb6\x30\x6c\x42\x95\xe1\x2e\x4a\x3b\x1f\x27\xa0\x31\x66\x67\xc1\x6c\xc6\x67\xaa\x56\xbf\x51\x5d\x69\xf0\xaa\x6a\xd9\xc5\x9c\x17\xf0\xa9\x5f\x2d\x2e\xad\x56\x6f\x4c\x01\x37\xf2\x00\xbc\x03\x35\x13\x93\x77\x66\xdc\x7f\xe6\xbc\xaf\x92\x6e\xad\x63\xe2\x94\xfc\xff\xd0\x5c\x05\x6a\xea\xb9\x8b\xe7\x2f\xb6\xe0\xc2\x45\xd8\x6a\xa1\x85\xf7\x50\x65\xe1\x47\x6b\xf3\x95\xb5\x0b\x17\xce\xa1\xc0\xee\xf8\x3f\x3b\xc7\xf7\x7f\xdf\x7b\xf0\xb9\x7f\x21\x70\x0d\x00\xf5\xe5\x5f\x97\xa7\xa3\x17\xe7\xa6\x00\x98\x16\x3f\x06\x00\x49\xc0\x55\xb8\xe0\x6b\xfa\xcf\x90\x89\x5f\x0e\xb8\xb6\x45\x44\x9d\x21\x7e\xbc\x98\x10\x1b\x82\x1f\x68\x00\xd0\x6c\x61\xca\xda\x1a\xdc\xcc\xe0\x54\x97\x0a\x4d\x48\xd7\xbd\xc4\x0f\xb6\x81\xa8\xe9\x67\x5d\x4a\xef\x28\x30\x72\xe5\xa2\xc0\xc6\x13\x00\x02\x23\xcd\xda\x20\x89\x46\xa1\x93\xf2\xf9\xdd\x93\x17\x2f\x7a\xb7\xf7\x7a\x9f\x6c\xf7\xbf\xfc\xed\xcb\x47\xf7\xfd\xf0\xc5\xf9\x99\x07\x6c\x5c\xc6\x19\x48\xe1\x7c\xd4\x2c\xad\x7a\xf3\x88\x9c\x5c\x7c\x10\xf8\x14\x6a\xa6\x50\xab\x44\x53\xc1\x9b\x49\x37\xc4\x13\x0f\x3f\x3b\xf9\xdf\x83\xa1\x38\x78\x73\xd1\x2d\x24\x96\x48\xfd\x3b\x8f\x4f\x76\xfe\x94\x11\xc5\x44\xa9\x24\x12\xab\x43\x36\x56\xaa\x9a\x1a\x5e\xca\x3a\x5d\x6b\x06\x24\x8b\xaf\x22\xc0\x64\x3a\x11\x30\x89\xcf\xa9\x9c\xcd\xb0\x61\x59\x0b\x40\xd3\x74\x26\x04\x2e\x8a\xa0\xc6\x4c\x39\xdb\xe0\xed\x57\xe2\xeb\x82\x8a\x6f\x24\xee\x7e\xe4\xef\x7f\x14\x02\xa8\x42\x42\xef\x0b\xac\xd1\x99\x24\x6c\x9d\xe2\xe6\x61\xed\x9c\xda\xa8\xe4\x94\x63\x23\x22\x7e\xed\xea\x1b\xcb\xbe\x5a\x8d\x95\x40\x99\xa6\xf2\x45\x50\x4c\xa5\x9e\x56\xa7\xc9\xb8\x5c\xa3\xc8\x69\x4b\xd9\xa2\x5b\x36\xa6\xc8\x51\x30\x49\xf7\x6f\x25\x62\x2b\x8d\xbc\xc1\x4e\xa4\x67\xe4\x4a\x40\xf7\x01\xa3\x4d\x64\x17\x2d\x09\xcd\xe5\x09\x30\xab\x07\xa1\x72\xf0\x47\xa1\x29\x33\xd0\xf2\x90\x16\x75\xfc\x26\x1d\x90\xb2\xaa\x56\xae\xe3\xc5\xd5\x2f\x34\x3a\x12\x66\x5e\xb9\x15\x95\x15\x49\x3b\xf4\x9b\x8d\x59\x3f\xaf\x0d\x75\x1a\xc5\x1a\x6c\xcc\xc0\x6c\x9a\x86\x62\x1b\x1d\x1d\x8f\xca\x65\xc3\x6e\x4c\xf1\x75\x6a\xa3\x49\xdc\xd9\x93\xef\xed\x15\xee\xab\x98\x82\x09\x39\x2b\xe4\xab\xb0\x23\x12\x9e\x37\xf2\x98\x49\xcf\xc4\x37\x16\x15\x46\x81\x16\x72\xda\x81\xbe\x01\xee\x67\x16\x38\x0c\xd9\x97\x80\xd3\x46\x86\xf1\x13\xa7\x7d\x93\x00\xff\xe3\xb7\x7f\xea\xd0\x44\x7c\x78\x30\x40\x62\x57\x82\x5f\x06\x5c\x1a\x5c\xe2\x2b\x23\xb5\x6d\x01\xbe\xae\x05\x36\x2c\x6a\x68\xfe\x9d\x2b\x03\xe9\xe4\x69\xa6\x57\xea\x98\x79\xdf\x1d\x2d\x98\xed\x1a\x3e\x9e\xe2\x9c\xe1\x21\x92\x70\xed\x4d\x76\xd0\x39\xdf\x29\xb6\xb5\x81\xa8\xeb\x8b\x2c\x37\x0d\xac\x52\x9c\x95\x64\x40\x52\x47\xc6\x74\x5c\x12\x3d\x31\x64\xda\x06\x64\xe8\x2d\x41\x49\x11\xd4\xa9\xbb\xce\x8c\xa2\xae\x59\x06\x24\x7a\x00\x32\xbf\x5f\x7c\x09\xcc\xbd\x5b\xb9\x49\xba\x90\x72\x2c\xb8\x3f\x0c\xf4\x40\xc1\xe1\x07\x75\xe4\x03\x64\x38\x2f\x3b\xd8\xd0\xbc\xeb\x24\x7a\x81\x63\x76\x80\x2a\x49\x16\xd4\xad\x59\x77\x89\xd9\xb9\x58\xba\x0f\x56\xe6\x1f\x44\xba\x97\x84\x20\xd6\x2d\x6f\x1a\x30\x21\x26\xef\xea\xd6\xa8\x9b\x99\x8f\x6e\x86\x21\x87\xe5\xdf\x0b\x9f\x05\x66\xbb\x37\x49\x2e\x16\x3a\x3b\x78\x04\x44\xfd\x73\xd8\x85\xaf\x23\x38\x3e\x82\x5d\x58\x24\x3c\xcc\x2e\x01\xaa\x81\x20\x89\x5f\xc6\xfc\x19\x07\x34\x99\x7f\x83\x45\x40\x86\x6f\xc4\xc7\xcc\x6b\x8a\x98\xe0\xe4\xaa\xdb\xe6\xeb\x08\x18\x62\x9b\x45\xe2\x85\xd8\x66\x74\xde\x78\x78\x19\xec\x2f\x06\x17\x57\x76\x84\x27\x4a\xef\xd0\x9f\x09\x52\x20\xf3\xff\x00\x00\x00\xff\xff\xeb\x95\xce\xc7\xb3\x3d\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
