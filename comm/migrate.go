package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcd\x0a\x83\x30\x0c\xc0\xf1\xfb\x9e\xa2\xef\xe1\x69\x63\x0e\x84\xc1\xc6\xf4\xb0\x5b\xcd\x6a\x94\x62\xbf\x68\xa2\xe0\xdb\x0f\x07\xbb\xa6\x9e\xff\x3f\x62\x62\xaf\xaf\xc7\x53\x75\xe7\xcb\xbd\x56\xcd\x4d\xd5\xef\xa6\xed\x5a\xd5\xb3\x86\xcc\x76\x04\xc3\x3a\x81\x99\x61\xc2\xbe\x3a\x15\xe9\x8a\x99\x6c\x0c\x07\x68\xcc\x9b\xa0\x3e\x8b\x75\x83\xd0\x8d\x1f\xb4\xb3\x41\xda\x89\x58\xde\x99\x18\x93\x90\x3d\x12\xc9\x03\x62\x9e\xe4\xaa\x93\x4d\xd2\x80\x3d\x17\x8e\xf8\x13\x6d\x62\x18\x8f\xb8\x15\xf2\x21\x56\x7c\xa7\x04\x19\xbc\xd0\x17\x42\xe9\x4b\x7b\xd6\x36\x8c\xb1\x64\xe4\xbf\xf8\x23\x9e\x8a\x84\xe3\x8c\xd2\x35\x9b\x77\x3a\xb9\x65\xb2\x25\xc4\xe8\x93\x03\xc6\xbe\xfa\x06\x00\x00\xff\xff\x77\xfa\x94\x72\x17\x03\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x1b\xc7\x11\x7f\xd7\xa7\x58\xe4\x85\x14\x20\x05\x94\x6c\xa5\xb6\x8b\x00\x95\x6d\xd6\x65\x2b\x53\x85\x44\xa5\x09\x60\x80\x5c\xde\x2d\xc9\x8d\xee\x76\x0f\x7b\x4b\xca\x02\xfa\x40\xa1\x4d\x6b\xd7\x2d\x62\x37\x69\x9c\x20\x4d\x5b\x21\x40\x83\x02\x4e\xe5\x07\x57\x30\x24\xb9\xf9\x30\x11\x29\xf9\x29\x5f\xa1\xd8\xfb\x23\x1e\xef\xdf\xee\x51\x47\xff\x41\xcd\x07\x5b\xba\x9d\x1d\xcd\xcd\xfc\xe6\xb7\x33\xb3\xbc\xb6\x56\x5e\xae\x95\x41\x6d\xf9\xea\x4a\x19\x34\x78\x1d\x32\x8e\x5b\x50\xe3\x75\x0b\x6a\x9b\xb0\x8d\x1a\xa0\x38\x03\x40\x03\xeb\x0d\xd0\x83\x4c\xeb\x40\x56\x7c\xe7\xe2\x2c\xa8\xae\xd6\x40\x75\x63\x65\x65\x4e\x2c\x42\xb1\xda\xc4\x6d\x4c\x78\x71\xb1\x34\x5a\x04\xcb\x1b\xb5\xd5\x7a\xa5\x7a\x6d\xad\x7c\xb3\x5c\xad\x39\xb2\x0c\x59\xb4\x1e\xd6\x76\xbd\xfc\xd3\xe5\x8d\x95\x80\x46\x02\x4d\x34\x12\x59\x28\x95\x62\x64\x74\x6c\x5b\x06\xdc\xae\x8f\xcb\x2e\x2e\x2d\xc5\xc9\x22\x5b\x1b\xc9\x2c\xc5\xea\x33\x20\x47\x36\x7f\x0f\x31\x1b\x53\x22\xb1\x6f\x4c\x76\xbd\x03\x65\xb6\x6a\x0c\x41\x8e\xf4\x06\xd0\x21\x47\x1c\x9b\x28\x2a\xd2\xb5\x74\x99\x88\x8e\x0c\xe4\x88\x08\x47\x2f\xc4\xbe\xa6\x23\x50\x17\xdb\x53\x14\xfd\x72\xad\x72\x73\x79\xed\x03\xf0\x8b\xf2\x07\xa0\xe8\x44\x6f\xce\x89\xf0\xac\x58\x14\x0f\x1b\x96\x88\x50\xf1\x2c\x58\xa3\x05\x66\x11\x33\xb8\x32\xe7\xc5\x6a\x76\x66\x16\x94\xab\x37\x2a\xd5\x32\x78\x17\x54\x08\xa1\xd7\xaf\x9e\xfd\xd9\x6b\x3f\x5b\x5e\x5b\x2f\xd7\xc0\xbb\xa0\xcb\x5b\x97\xcc\xe6\xc5\x1f\xcf\x24\xa2\xae\xe7\xbb\xff\x65\xa0\xce\x83\x7c\x3e\xf0\xec\x85\x81\x14\x2f\x66\xcb\xc1\xa3\x02\x5e\x8b\xa1\x1e\x46\x5b\xc9\xd0\x78\xdd\x10\x38\x65\xa0\x51\xb6\x9d\x37\xc6\xba\x52\xd8\x50\xd6\x96\x63\x0b\xeb\x88\x70\xdc\xc2\x88\x05\x63\x2e\x05\xe1\x62\x12\x47\xc2\xa6\x11\x13\xb0\x42\xa9\x00\xae\xad\xde\x14\xc6\x83\xc2\xf0\xf3\xbd\xc1\xfd\x7f\x0e\x9e\xfd\x79\xb8\xfb\x75\x71\xc1\xfd\xff\xd7\xa5\xe1\xb7\x5f\x0f\x9e\x3e\x9d\x2d\xb8\x30\xa5\x5d\xa6\x21\x89\x45\x4a\x2c\x4b\xdb\x54\xc6\xd6\xaf\x09\x56\xc1\xc6\x7a\xa5\x7a\x03\x5c\xad\xad\x95\xcb\xe7\x43\x65\xb3\x8b\x0d\x5d\x05\x8f\x16\xb6\x90\x81\x49\x94\xa2\x1c\x50\x46\x59\xc1\x17\xf7\xc8\x48\x71\x9b\xcd\x21\xef\xda\x21\x5a\x8a\x88\x06\xf0\xf3\xb7\xdf\x0e\x0e\x0f\x4e\xfe\xb0\x3f\xec\xef\xb8\x70\x41\x8c\x51\x16\x82\x42\x8a\x82\xe7\x9f\x7e\x71\xba\xb7\x77\xfc\xdd\xee\x70\x67\xcf\x53\xd0\x43\x84\xab\x5b\x70\x7c\x70\xef\xf8\x70\xbf\xe0\x5b\xcf\xc6\xa0\x51\x4c\xdf\x3b\x38\xea\x0f\xbe\xb9\x37\x7c\xb8\xff\xfc\xe1\x13\x57\x43\x0b\x13\x6c\x77\x32\xa8\x38\x39\xfc\x64\xf8\xd5\xdf\x83\x2a\x22\x10\x96\x19\x71\xe7\xcb\xc1\xe1\x41\x50\x43\x04\xe1\x12\x0d\xc3\x2f\x9f\x0c\x3f\x7b\x1c\xd4\x10\x39\x81\x9c\x6c\x4b\x7b\x8d\xbb\x77\x86\x7f\x7d\x54\x88\x82\x3e\x5f\xb4\x6b\xa6\x5e\x17\xa8\x54\x01\x7c\x9b\xd1\xae\xa5\x08\x5b\x27\x8b\x94\x21\x8e\x54\xd5\x86\xb3\x61\x29\x2e\x0e\x2e\x23\x77\x4d\x8f\x6d\x16\x92\x44\x34\xaa\x23\xb9\x0c\xe1\x0e\xfa\x39\xba\xcd\x53\x58\x31\x16\x10\x19\x52\x20\x0b\xd6\xa7\x8d\x09\x9b\x2b\xf6\x1a\xd9\x29\x2d\x90\x22\xff\xd9\x19\x3e\x7e\x72\x72\xf0\x1d\xd6\x0b\x13\x20\xe6\xa5\x93\x62\x4c\xa7\x93\x46\x29\xf7\xff\x34\xf8\xf6\x61\x41\xd6\x2b\x9d\x07\x41\xff\x07\x24\x6a\x53\xc6\x65\x09\xeb\x81\x57\xee\xd6\xe9\x66\x10\xb2\x54\x12\x28\x23\xe6\x43\xed\x90\x14\xf5\xe1\x14\xcb\x8c\xbc\x5c\x13\xdc\x75\x8a\x1a\xde\xcf\x9b\xdd\x93\x57\x2c\xe8\x36\xe6\x75\xc9\xc9\x10\xe0\x85\x7e\x7f\xf0\xfb\x83\x93\x7f\x4c\x87\x55\x64\x76\x07\x59\xe5\x0d\x49\xe4\x50\x69\x89\x00\xe2\x36\xa1\x4c\xa1\x2e\x30\x4d\x48\x74\x3b\x5c\x18\x6c\x41\xcc\xed\x06\xf8\xd0\xa6\x24\x00\x68\x39\x6f\x4d\x93\x8d\x4c\x64\xdb\x59\xa6\x87\x57\x2b\x37\x2a\xd5\x5a\xb6\xfe\x3a\x2d\xc8\x1f\x3f\x78\xde\xdf\x39\xed\x7f\xf4\xc3\xd1\x9d\xc1\xc7\x7b\x27\xff\x3a\xf8\xe1\xe8\xae\xeb\x6e\x8e\xb9\xa1\xc6\x44\x67\x75\x98\x41\x49\x7b\xdc\xe5\x7c\xdb\x42\x4a\x25\x61\x86\xa2\x0d\x93\x16\x8d\xc4\xb6\xcb\x0c\x59\x6e\xbf\xa0\x1e\x95\xb2\xf6\x8b\x8d\x66\xd2\x90\x23\x5e\xd0\x9d\x3d\xd4\xca\xef\xd7\x92\xce\x95\x6e\xd3\xc0\x5a\x03\x54\xaa\xb5\x62\x38\x23\x4a\x01\xe4\x7c\xf4\x68\x70\xd4\x7f\x75\xa8\x25\x3c\xc5\x18\xb7\x3b\x65\x8e\xa1\x58\xc6\x27\x60\x45\x08\x56\xaa\xd7\xcb\xef\xbb\x91\x2a\x3a\xff\xe6\x8b\xa6\xba\x38\xe9\x3d\x48\x65\x99\xb3\xc5\x4d\xd1\x92\x4b\x89\x4c\xe5\xc3\xa7\xfb\xc7\x87\xfb\xc7\x07\x07\x59\xc2\x3f\x21\xb8\xa2\x51\x48\xf2\xbf\xf7\xbe\x45\xff\x87\x1c\xa3\xe0\xd7\x5a\x2a\x89\x2d\x1f\x6f\x2a\x5d\xc4\x64\xb8\xb4\x39\xab\x04\x05\xdb\xca\x84\xb7\x4d\xa3\x1e\x21\x6c\x97\x91\x34\x0d\xd9\x76\x9d\xd3\x4d\x14\x3e\xa1\xa3\x63\xc5\x20\xdd\x26\x88\xd8\x88\xa9\x58\xaf\x30\xc4\x4c\x9a\x50\x16\x4a\x85\xc9\x07\x94\xd3\x41\x88\xf0\x6d\x2b\x98\xac\x2a\x99\x9a\x3c\xad\x5c\xcd\xe6\xf3\x2c\x21\x4c\x06\x82\x62\xe4\x24\x99\x99\x93\x3f\x33\x5c\x74\x29\x64\x5e\xd7\x6c\x22\x36\xc6\xa0\x69\x6d\xcb\xf0\xd1\xee\xf0\x2f\x8f\x03\x6d\x4b\xb8\xf1\x49\x6b\x59\xac\xae\xdd\xf9\xbe\xbf\x63\xb1\xef\xfb\x3b\x84\x72\x54\x88\x5e\x63\x49\xd2\x39\x53\xee\x4f\x44\x18\x52\x87\xc5\x17\xec\xf2\x0a\x30\x73\x66\x73\x4c\xb6\x13\xb2\xdb\x62\x75\x49\xdc\x1c\x31\xe7\x02\x4c\x33\x28\x41\x75\x79\xa6\x4c\x95\x0a\x20\x83\xe6\x04\xe7\xb5\x4a\x7f\x99\xb1\x32\xd7\x21\x87\xe1\x4a\x59\x04\xc2\x9e\xa8\xfc\xc9\xd1\x47\x82\x62\xf2\xac\x92\x95\x7d\x67\x41\xdb\x56\x72\x1d\xc1\xda\xa6\x92\x46\xd8\x83\x1c\x4a\x07\x0b\x59\x0b\x25\x83\xb6\x31\x51\xad\x54\x1b\x50\xe3\xb8\x87\x92\xce\xc7\x29\x34\x3d\xf3\xf3\x60\x3e\xe5\x33\x53\xa9\xae\x97\xd7\x6a\xa2\xcc\x5b\x75\x30\xe7\x06\x7c\xe6\xbd\xe5\x95\x8d\xf2\xfa\x0c\x70\x22\x0f\xc0\x5b\x50\x37\x31\x79\x6b\xce\xf9\x65\xc1\xfd\xaf\xd0\xa6\x9b\x98\xd8\x05\xef\x37\xb4\x50\x82\xba\x76\xe1\xf2\xc5\xcb\x4d\xb8\x74\x19\x36\x9b\x68\xe9\x1d\x54\x5a\xfa\x51\x6b\xb1\xd4\xba\x74\xe9\x02\xf2\xe5\x4e\xfe\xbd\x7b\x72\xff\x77\x83\x07\x9f\x7b\x0f\x7c\xd7\x00\x50\x5d\xfd\x55\x71\x36\xfc\x70\x61\x06\x80\x59\xf9\x6b\x00\x10\x07\xdc\xba\xe8\x40\x1b\xde\x3b\xa4\xe2\x57\x00\xae\x43\x89\xec\x3b\x10\xe2\x78\x31\x21\x36\x24\xb7\xd4\x00\x34\x9a\x98\xf1\x8e\x0e\xb7\x53\x38\xd5\xa1\x42\x13\xb2\x4d\x37\xf1\x7d\x33\x10\x33\xbd\xac\x4b\xb8\xe6\xf5\x85\x9c\xfe\x55\x22\xe3\x76\x24\x12\x21\x9d\x6e\x91\x58\xa1\xc0\x49\xf9\xf4\xde\xe9\xb3\x67\x83\x3b\xfb\x83\x4f\x76\x86\x5f\xfd\xe6\xf9\x17\xf7\xbd\xf0\x45\xf9\x59\x04\xec\xbc\x8c\x33\xea\xcd\xb3\x51\xb3\x72\x1b\x9e\xa5\xeb\xca\xc4\x07\xbe\x4f\xa1\x6e\x4a\x9b\xa7\x70\x2a\xb8\x3b\xd9\x96\x7c\xe3\xd1\x67\xa7\xff\x7d\x30\x16\x07\x77\x2f\xba\x8d\xe4\x3d\xdb\xf0\xee\x37\xa7\xbb\x7f\x4c\x89\x62\x6c\xef\x26\xeb\x9e\xc7\x64\x68\x62\x7b\x37\xae\x8a\x9e\xe9\x9a\x03\xf1\xdd\x60\x1e\x60\x32\xed\x10\x98\xe4\xe7\x54\xc6\xe9\xdc\x78\x9f\x0d\x40\xc3\xb4\xa7\x04\x2e\x86\xa0\xce\x4d\x35\x59\xff\x0a\x20\x76\x66\x5a\xf2\x84\xe4\xe3\x98\xec\x03\x99\x5c\x00\x95\x4b\xe8\xbd\x06\x6b\x72\x26\x09\x4a\x27\xb8\x79\xbc\x99\x4f\x9c\x9c\x0a\xca\xb1\x10\x91\xdf\x3d\x79\xc2\xaa\xf7\x4b\x91\x12\x28\x55\x54\xbd\x08\x8a\x74\xa9\x67\xd5\x69\x3c\x2e\x5b\x0c\xd9\x1d\x25\x59\x74\xdb\xc2\x0c\xd9\x75\x4c\x92\xfd\x5b\x0a\xc9\x2a\x23\x6f\x64\x89\xf2\x8e\x4c\x09\xe8\xbc\x60\x78\xaa\xed\xa0\x25\x66\xda\x3d\x05\x66\x75\x21\x54\xf4\x7f\xc8\x35\x65\x46\xbd\x3c\x64\x79\x1d\xbf\x71\x07\xa4\x6a\x57\xab\x36\x82\x13\xdd\x2f\x34\xba\x0a\x62\x6e\xb9\x15\x6e\x2b\xe2\x2c\xf4\xa6\x9f\x69\xdf\x31\x0c\x8c\x3e\xe5\x3d\xd8\x39\x03\xb3\x6d\x1a\x75\xcb\xe8\xb6\xf1\xa4\x5c\x36\xee\xc6\x04\x5f\x27\x0e\x9a\xe4\x93\x3d\xf5\xd9\x5e\xee\xbe\x8a\x74\x30\x01\x67\x05\x7c\x15\x74\x44\xcc\xfb\x86\x5e\x33\xee\x9d\x84\x61\xe1\xc6\xc8\xef\x85\xec\x8e\xdf\xdf\x00\xe7\x33\x0f\x6c\x8e\xac\x2b\xc0\xee\x20\xc3\xf8\x89\xdd\xb9\x45\x80\xf7\xf1\xc6\x3f\x55\x68\x22\xb1\x3c\x5a\x20\x91\x27\xfe\xf5\xe8\x95\xd1\x23\xa1\x19\x69\x1d\x0a\x84\x5e\x0a\xb6\x28\x33\x74\xef\x2f\x97\x46\xad\x93\xdb\x33\xbd\x54\xc7\x2c\x7a\xee\x68\xc2\x74\xd7\x88\xf5\x04\xe7\x8c\x2f\x91\x98\x67\xaf\xb3\x83\x2e\x78\x4e\xb1\xe8\x16\x62\x8e\x2f\xd2\xdc\x34\x92\x4a\x70\x56\x9c\x00\x49\x5c\x39\xa7\xe3\xe2\xe8\x89\x23\xd3\x32\x20\x47\x6f\x08\x4a\x89\xa0\xce\xdc\xf5\xc2\x28\xea\x06\x35\x20\x69\xfb\x20\xf3\xe6\xc5\x57\xc0\xc2\xdb\xa5\x5b\xa4\x07\x99\xc0\x82\xf3\xed\x28\x17\x14\x02\x7e\xb0\x8d\x3c\x80\x8c\xe7\x65\x17\x1b\xba\xfb\x9c\x84\x1f\x08\xcc\x8e\x50\xa5\xc8\x82\x6d\x3a\xef\xa8\x98\x5f\x88\xa4\xfb\x48\xb3\xf8\x20\xd2\xbb\x22\x05\x71\x9b\xba\xdb\x80\x09\x31\x79\xbb\x4d\x27\x35\x66\x31\x6c\x0c\x47\x36\xcf\x6e\x8b\xd8\x05\xe6\x7b\xb7\x48\x26\x16\x7a\x71\xf0\xf0\x89\xfa\xe7\xb0\x07\x5f\x45\x70\x7c\x08\x7b\x30\x4f\x78\x98\x3d\x02\x34\x03\x41\x12\x7d\x8c\xc5\x3b\x8e\x68\x32\xbb\x81\x79\x40\x46\x18\xe2\x61\xe6\x15\x45\x8c\x7f\x72\x55\x2d\xf3\x55\x04\x0c\xb1\xcc\x3c\xf1\x42\x2c\x33\xbc\xef\x7c\x78\x19\xd9\x17\x81\x8b\xd3\x76\x04\x37\x2a\x5b\xe8\xed\x04\x09\x90\xf9\x5f\x00\x00\x00\xff\xff\x2c\x1e\x33\x1b\x14\x3b\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
