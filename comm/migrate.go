package comm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _mysql_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x41\xaa\xc2\x30\x10\xc6\xf1\xfd\x3b\x45\xee\xd1\xd5\x13\x2b\x14\x04\xc5\x76\xe1\x6e\x1a\xed\x18\x06\x33\x49\xc8\x24\x82\xb7\x97\x0a\x2e\x9d\xb8\xfe\xff\x98\xf0\x65\x7b\x3a\x1c\xcd\xf4\xbf\xd9\xf7\x66\xd8\x99\xfe\x3c\x8c\xd3\x68\xe6\x02\x97\x4a\x7e\x99\xbb\xbf\x6f\xfd\xca\x0b\x78\x0a\xa8\x10\x29\xd6\xe9\x1d\x93\x92\x19\x45\xf4\x03\x31\x3b\xbd\x42\xa2\xa4\x1d\x58\x73\x63\xc4\x87\xc0\xc3\xe6\x9f\x18\x66\xa1\x18\x34\x6a\xb3\x65\xa5\x57\x41\xed\xa5\x35\x03\x85\x5b\x6c\x19\xfd\x77\xde\x84\xa5\x49\x4a\xbc\xa3\xb6\xe6\xc9\x1e\x92\xaf\x8e\x5a\xa8\x20\x27\x6f\x0b\xce\xdd\x2b\x00\x00\xff\xff\x0c\xf7\x78\x5d\x73\x02\x00\x00")

func mysql_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_down_sql,
		"mysql/000001_gokins.down.sql",
	)
}

var _mysql_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\x13\xc7\x16\x7f\xcf\xa7\x18\xf1\x62\x47\x4a\x90\x1d\x08\x17\x72\x5f\x6e\x00\x5f\xe4\x7b\x83\x73\x15\x9c\x5b\x90\x90\xd6\x63\xef\xc4\x1e\xd8\x9d\x5d\xcd\x8c\x9d\xe4\xcd\x51\x4b\x0b\xa5\x15\xa0\x52\x28\xa2\xb4\xcd\x13\xaa\x44\x1b\x1e\x68\x1e\x9c\xa8\x7c\x18\x62\x27\x79\xe2\x2b\x54\xb3\x7f\xe2\xf5\xfe\xf1\xcc\x1a\x43\x53\x15\x3f\x40\x32\x73\xe6\xf8\xcc\xef\xfc\xce\x99\xdf\x0c\x5c\x58\x2a\xcc\x97\x0b\xa0\x3c\x7f\x7e\xa1\x00\x2a\x5c\xab\x36\xb1\xa1\x57\x40\x76\x02\x80\x0a\xd6\x2b\xa0\x05\x69\xad\x01\x69\xf6\xcc\xe9\x49\x50\x5a\x2c\x83\xd2\xf2\xc2\xc2\x94\x98\xb4\xb1\x8d\x0c\x4c\x90\x16\xb1\x5a\x5e\x58\x00\x17\x0b\xff\x9e\x5f\x5e\x88\x33\x6f\x21\xca\xb0\x45\x14\x97\x31\x0e\x79\x93\xf5\x2d\xf3\xb9\x5c\x8c\x29\xb8\xb0\x78\xf9\x72\xa1\x54\x06\x99\xde\x0f\x9f\x75\x77\x3a\xfb\x5f\x6e\xf7\xda\x1b\x19\xc7\x03\xa2\xd4\xa2\x7d\x07\xb3\x12\x07\x87\x0f\x9f\x1c\x6c\x6d\xed\xbd\xde\xec\x6d\x6c\x79\x0e\x5a\x88\x70\xf5\x08\xf6\x3a\x77\xf7\x76\xb6\x33\x7e\xf4\x94\x23\xbd\x02\x74\xc8\x11\xc7\x26\xca\x0e\x5f\xdb\xdd\x6d\x77\x9f\xdf\xed\x3d\xde\x3e\x7c\xfc\xca\xf5\xb0\x82\x09\x66\x8d\x14\x2e\xf6\x77\xbe\xe9\x3d\xfb\x31\xe8\xa2\x46\x11\x4c\x15\xc4\xed\xa7\xdd\x9d\x4e\xd0\x43\xd3\xd6\x53\x79\xe8\x3d\x7d\xd5\x7b\xf4\x32\xe8\xc1\x4b\x7a\x1f\xc5\x99\xd9\xd9\xe1\xdb\xb8\x73\xbb\xf7\xfd\x0b\x67\xf1\xff\x96\x8a\x97\xe7\x97\xae\x81\xff\x16\xae\x81\xac\xe0\xe4\x24\x58\xbe\x52\x2c\x5d\x02\xe7\xcb\x4b\x85\xc2\xc4\xe4\x3f\x27\xc2\x1c\xae\x99\xba\x26\xb8\xa6\x42\xe3\x3a\xb5\x9a\xb6\x22\x19\x9d\xda\x50\x26\x2e\x52\x75\x1b\xe6\xf8\x6c\x1c\xba\x8e\x25\x69\x9a\x15\x80\x09\xcf\xe6\xf3\x49\x26\x35\x4b\x47\x72\x1b\xc2\x1d\x4e\x73\xb4\xc6\x03\xc3\x4a\x44\x49\x41\xec\x34\x0c\x1e\x2d\xd3\x8c\xc3\xba\x52\x9a\xd3\xb7\x9f\x00\x9d\x7f\xdb\xe8\xbd\x7c\xb5\xdf\x79\x8d\xf5\xcc\x08\x3c\xf8\xd3\x1b\x18\x81\x26\x52\xaf\xbc\xee\xfd\xaf\xbb\xbf\x3c\x76\x57\xea\x98\xd9\x06\x5c\xd7\x54\x3c\x7c\x6c\x78\x41\x0f\xcc\xa2\x5c\x56\x86\x1e\x79\xe5\xb0\x8e\x52\x17\xc8\x56\x29\x8b\x94\x4c\xae\x0f\x9e\xf6\x52\x2e\x87\x0b\x27\x35\x9f\xc6\x5a\xb6\x2e\x28\x6a\x2c\x7e\xd7\x9a\x1d\x5d\x33\xa0\x35\xcc\x35\x49\x17\x0f\x54\x7b\xbb\xdd\xfd\xa2\xb3\xff\xd3\xfb\xe9\x15\xb2\xb8\x83\xbd\xe2\x63\xe9\x8f\x41\xeb\x88\x04\xe2\x3a\xb1\xa8\xc2\x19\x6e\x9a\x90\xe8\x2c\x7c\x88\xaf\x42\xcc\x59\x05\xdc\x60\x16\x09\x10\x5a\xde\x8d\xd2\xf7\x18\x13\x31\xa6\x78\xfa\x42\x31\x7b\xbe\x78\xa9\x58\x2a\x1f\x4d\x80\xf9\xe5\xf2\xa2\x56\x2c\x5d\x58\x2a\x08\x18\x5c\xf0\x53\x94\x77\xf7\xde\x83\xc3\xf6\xc6\x41\xfb\xd6\xdb\xdd\xdb\xdd\x7b\x5b\xfb\x3f\x77\xde\xee\xde\x71\x41\xe4\x98\x1b\x6a\xfd\xe5\x48\x09\x19\x16\xa9\x0f\x02\xc9\xd7\x6d\xa4\x24\xca\x52\xc8\x26\x4c\x56\xac\x48\xc6\x9a\xd4\x90\x55\x6c\x34\x41\x02\xd1\x29\xa0\x94\x27\x8b\xd6\x3f\x6c\x8e\xe2\x44\x47\xe2\xb6\x2a\x3a\x62\xb5\x0a\x28\x17\xae\x96\x93\xce\x80\x66\xd5\xc0\xb5\x0a\x28\x96\xca\xd9\x30\x7b\x73\x01\x3e\xdc\x7a\xd1\xdd\x6d\x1f\x9f\x36\xa0\x23\x03\x39\x1e\x9c\xb2\x0b\xc7\x1d\x34\xd1\x84\xff\xd4\xf2\x38\x81\x01\xc2\xb0\x58\xba\x58\xb8\xea\x66\x2a\xeb\xfc\xa9\xc2\x11\x4d\x9c\xb5\x1e\x51\x1c\x2e\x54\x71\x5d\x84\x3e\x93\x9b\x1c\xca\x07\xb1\x54\xfd\x09\x20\xd5\x01\xfe\x70\x7b\x6f\x67\x7b\xaf\xd3\x49\x93\xd4\x11\x29\x13\xc5\x36\x09\x55\x6f\xbf\x59\xff\x07\x29\xb6\xbe\x86\x51\x29\xc2\x48\x71\xc9\xea\x4a\xb4\xb6\x68\x49\x25\xcb\xac\x64\x85\x25\xfa\x9d\xcc\x58\x9c\x2a\x5a\xa4\x67\x3a\x53\xeb\xa6\x91\x30\x03\x6b\x35\xc4\x98\xc6\xad\x9b\x28\x7c\x28\x46\xbe\x60\xa0\x17\x26\x98\x30\x44\x95\x40\x08\xd5\x9f\x6f\x90\xc9\x65\x86\x14\xdf\x18\xce\xc5\xb0\x66\x55\xc9\x3b\x69\x9a\x55\x44\x07\x6a\x6e\x98\xd4\xec\xbd\xd8\xec\x7d\xfb\x32\x20\x35\xc3\x62\x75\x98\xcc\xb4\x9b\xac\xf1\xa6\xbd\x61\xd3\x37\xed\x0d\x62\x71\xe4\xc9\xb7\x06\x54\xa6\x4a\x2a\x5e\x8d\x44\x46\x69\x19\xc4\x8b\x2c\xf9\xf9\x1e\xdf\x49\x86\xb0\x87\x63\xb2\x9e\xc0\x20\x9b\x6a\x92\xbc\x39\x66\x14\xd9\x96\x56\x33\x2c\x82\x34\x39\xbd\x47\xa0\x1b\xa4\xd0\x1c\xa1\x6f\xab\x28\xfd\x94\x6a\x4a\x87\x1c\x86\xd5\x8d\x80\x97\x8d\x74\xb8\x49\x77\x2e\x3a\xc1\x38\x95\x8d\x32\x22\x36\x64\x4c\x09\x10\x82\x6b\x37\x95\x3c\xc2\x16\xe4\x50\x7a\x71\x4b\x7b\x0c\x1a\x56\x1d\x13\x55\x75\x51\x81\x35\x8e\x5b\x28\xa9\x5f\x2a\xcb\xcf\xe9\x69\x30\x3d\xe4\x33\x51\x2c\x5d\x29\x2c\x95\xc5\xd1\xbc\xe8\xf0\xc3\x4d\xe3\xc4\xff\xe7\x17\x96\x0b\x57\x26\x80\x93\x4f\x00\x4e\x40\xdd\xc4\xe4\xc4\x94\xf3\x4b\xde\xfd\x2b\xe3\x8c\x65\xbc\x5f\x50\x3e\x07\xf5\xda\xa9\x73\xa7\xcf\x55\xe1\xec\x39\x58\xad\xa2\xd9\x33\x28\x37\xfb\x8f\x95\x99\xdc\xca\xd9\xb3\xa7\x90\x6f\xb7\xff\xeb\xe6\xfe\xfd\xcf\xbb\x0f\xbe\xf3\x06\xfc\xfd\x02\x50\x5a\xfc\x24\x3b\x19\x1e\xcc\x4f\x00\xa0\xb0\x0b\x00\xe2\xd8\xa8\x09\x81\x5f\xf1\xb6\x30\x94\x94\x82\x45\x0d\x8b\x84\xf9\x16\x4e\x8a\xe8\xef\x26\xc4\x46\x48\x49\xc7\x98\x55\x31\xe5\x0d\x1d\xae\x0f\x69\x6a\x4e\x2f\x32\x21\xbd\xe9\xd6\xa8\x1f\x06\xa2\xa6\x57\x4a\xa1\xcc\x07\x63\x15\x46\xce\x45\x42\x62\xe3\x8a\xc8\x44\xa3\x68\x7b\x73\xe1\x8e\x05\xf3\xe8\xe2\x92\xae\xb3\x29\xdf\x51\xd2\x88\xd7\x54\x85\xe7\x83\x01\x75\x53\xaa\x41\xc3\xf4\x74\x57\xd2\x55\xf9\xc2\xdd\x47\x07\xbf\x3f\xe8\x3d\xfb\xf4\xf0\xc9\xfd\x81\xb5\x68\x0d\xc9\xa5\x6f\xef\xce\xf3\x83\xcd\xaf\x06\x56\x2b\x48\x60\xd9\xd5\x62\xc0\xc6\x4a\x54\xc9\x83\xae\xac\x23\x5f\x53\x20\x5e\x54\x27\x53\xc4\x64\x21\x8a\xc8\xdb\x7c\xca\x67\x86\xc1\x4b\x08\x00\x15\x93\xbd\x27\xca\x50\x04\x75\x6e\xaa\xd9\xfa\x2f\x94\xb1\x4f\x3a\x39\xcf\x48\x7e\x03\x4d\x7f\x07\x1d\x0b\x4d\x86\x24\xd4\xbb\x25\x8c\x5e\xf5\x41\xeb\x04\xf0\x06\x6f\x3a\x89\x0f\x3b\xa2\x3d\xd8\x88\xc8\x1f\xbc\x3d\x63\xd5\x47\xed\x88\x2e\x18\x6a\xaa\xae\x0c\x22\x57\xad\x23\x21\x16\xcf\xb6\x15\x8a\x58\x43\xc9\x16\xad\xd9\x98\x22\xa6\x61\x92\x8c\x6f\x2e\x64\xab\xcc\xa7\x7e\x24\xca\x2b\x52\x95\x95\xb3\xc1\xf0\xa3\x9b\xc3\x96\x98\xc7\xb8\xf7\xd0\x05\x5d\x0a\x65\xfd\x1f\x14\x0a\xa1\x7f\x81\x84\x74\x4c\xa5\x10\x77\x42\xa9\xde\xb5\xd4\x1e\x1d\xc4\x9d\x0c\x1a\x4d\x05\x33\x57\x83\x84\x05\x74\x5c\x84\xde\x2b\x4e\x54\x90\xc6\x3e\xe1\xc8\xef\x10\xb1\x68\xaf\x9b\x86\x66\x1b\xcd\x3a\x1e\xb5\xed\x0c\x82\x93\x80\x60\xe2\xf3\x88\xfc\xa5\x42\xfd\xad\x42\x11\x81\x88\x02\x0f\x40\x10\x40\x20\xb8\xbd\x98\x5d\x84\x82\x8f\x8b\x54\x7c\x5d\x58\xd8\xfb\x5a\x9e\x35\x7c\x81\x0e\x9c\xcf\x34\x60\x1c\xd9\x73\x80\x35\x90\x61\xfc\x8b\x35\xae\x13\xe0\x7d\xbc\x07\x84\x12\x34\x91\x98\xee\x4f\x90\xc8\x88\xff\x8f\x22\x73\xfd\x21\xe1\x19\xd5\x1a\x16\x10\x7e\x2d\xb0\x6a\x51\x43\xf7\xbe\x39\xd7\xd7\xfe\xc7\x00\x98\x19\x0f\x8e\x2a\x1c\x0e\x8d\x98\x4f\x00\x67\x70\x8a\xc4\x8c\xfd\x95\x01\x3a\xe5\x81\x62\x5b\xab\x88\x3a\x58\x0c\x83\xa9\x6f\x95\x00\x56\x9c\x01\x49\x9c\x79\x47\xe0\xe2\x9a\x0e\x47\xa6\x6d\x40\x8e\xfe\xd6\x6d\xe7\x08\x84\x0f\xd6\x78\x2e\x59\x06\x24\x75\x9f\x3a\xde\x3b\xe2\x1c\xc8\x9f\xcc\x5d\x27\x2d\x48\x45\x86\x9d\xff\xe9\xe0\xa6\x5a\x90\x0a\xd6\x91\x97\xf6\xc1\x6a\x6b\x62\x43\x77\xc7\x49\x78\x40\x30\xb1\xcf\x15\xc5\xde\x56\xb7\xa6\x1d\x17\xd3\xf9\x48\x11\xf7\x3d\x8b\x0f\x22\xad\x39\x29\x35\xeb\x96\xbb\x0c\x98\x10\x93\x93\x75\x6b\xd4\x60\x66\xc2\xc1\x70\xc4\x78\xfa\x58\xc4\x2a\x30\xdd\xba\x4e\x52\xf5\x96\x0f\x47\x0f\xbf\xfd\xfe\x07\xb6\xe0\x71\x24\xc7\x0d\xd8\x82\xe3\xa4\x87\xd9\x22\xa0\x66\x20\x48\xa2\xc3\x58\xec\xb1\xdf\xfc\xd2\x07\x38\x0e\xca\x88\x40\x3c\xce\x1c\x53\xc6\xf8\xe7\x51\xc9\x36\x8f\x23\x61\x88\x6d\x8e\x93\x2f\xc4\x36\xc3\xeb\xde\x8d\x2f\xfd\xf8\x22\x74\x71\x84\x7f\x70\xa1\x72\x84\xde\x4a\x90\x40\x99\x3f\x02\x00\x00\xff\xff\xcc\x71\x05\x60\xed\x2e\x00\x00")

func mysql_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_mysql_000001_gokins_up_sql,
		"mysql/000001_gokins.up.sql",
	)
}

var _sqlite_000001_gokins_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x28\x89\x4f\x2a\xcd\xcc\x49\x49\xb0\x06\x04\x00\x00\xff\xff\xaa\x8a\x92\x63\x1f\x00\x00\x00")

func sqlite_000001_gokins_down_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_down_sql,
		"sqlite/000001_gokins.down.sql",
	)
}

var _sqlite_000001_gokins_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xcf\x4a\xc4\x30\x10\xc7\xf1\xfb\x3e\xc5\x1c\x15\x7c\x03\x4f\xd1\x1d\x61\x31\xbb\x4a\xc9\x82\x7b\x6a\xa2\x19\x75\xa0\xcd\x86\xcc\xb4\xcf\x2f\xc5\x3f\x28\x36\xa5\xe7\xdf\x87\x84\x2f\x73\xdb\xa0\x71\x08\xce\xdc\x58\x04\xaf\xed\xf3\xc0\x5d\xf4\x70\xb1\x01\xf0\x1c\x3d\x38\x7c\x72\x70\x78\x70\x70\x38\x5a\x0b\x8f\xcd\x6e\x6f\x9a\x13\xdc\xe3\xe9\x6a\x12\x99\x33\x75\x9c\xa8\xfd\xa1\x5b\xbc\x33\x47\xfb\xc9\xff\x92\x91\x8a\xf0\x39\x2d\x50\xd1\xa0\x83\xd4\x56\x2a\xe5\x5c\xaa\xe3\x48\x49\x6b\xa3\x72\x4f\xad\x68\xe8\xb3\x87\xad\x71\xe8\x76\x7b\x9c\x53\xda\xd1\x77\xf0\x14\xfb\x4f\xf4\x24\x12\xde\x96\x8d\x68\x28\x4a\xf1\xd7\x47\xf3\xee\x95\x13\xcb\xfb\x0a\xf8\x52\x28\xac\x79\x70\xc8\x71\x95\xfb\x3a\x43\x2d\x62\x73\x79\xfd\x11\x00\x00\xff\xff\x55\x1f\xab\xd7\x13\x02\x00\x00")

func sqlite_000001_gokins_up_sql() ([]byte, error) {
	return bindata_read(
		_sqlite_000001_gokins_up_sql,
		"sqlite/000001_gokins.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"mysql/000001_gokins.down.sql": mysql_000001_gokins_down_sql,
	"mysql/000001_gokins.up.sql": mysql_000001_gokins_up_sql,
	"sqlite/000001_gokins.down.sql": sqlite_000001_gokins_down_sql,
	"sqlite/000001_gokins.up.sql": sqlite_000001_gokins_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"mysql": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{mysql_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{mysql_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
	"sqlite": &_bintree_t{nil, map[string]*_bintree_t{
		"000001_gokins.down.sql": &_bintree_t{sqlite_000001_gokins_down_sql, map[string]*_bintree_t{
		}},
		"000001_gokins.up.sql": &_bintree_t{sqlite_000001_gokins_up_sql, map[string]*_bintree_t{
		}},
	}},
}}
